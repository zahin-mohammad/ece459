<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="789.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="789.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (6,921 samples, 1.66%)</title><rect x="0.0000%" y="709" width="1.6560%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="719.50"></text></g><g><title>[[heap]] (6,923 samples, 1.66%)</title><rect x="0.0000%" y="725" width="1.6565%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="735.50"></text></g><g><title>__memcmp_avx2_movbe (1,025 samples, 0.25%)</title><rect x="1.6639%" y="709" width="0.2453%" height="15" fill="rgb(221,193,54)"/><text x="1.9139%" y="719.50"></text></g><g><title>core::slice::memchr::memchr_general_case (3,831 samples, 0.92%)</title><rect x="1.9123%" y="709" width="0.9167%" height="15" fill="rgb(248,212,6)"/><text x="2.1623%" y="719.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (710 samples, 0.17%)</title><rect x="2.8289%" y="709" width="0.1699%" height="15" fill="rgb(208,68,35)"/><text x="3.0789%" y="719.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (196 samples, 0.05%)</title><rect x="2.9988%" y="709" width="0.0469%" height="15" fill="rgb(232,128,0)"/><text x="3.2488%" y="719.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (451 samples, 0.11%)</title><rect x="3.0457%" y="709" width="0.1079%" height="15" fill="rgb(207,160,47)"/><text x="3.2957%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (58 samples, 0.01%)</title><rect x="3.2627%" y="677" width="0.0139%" height="15" fill="rgb(228,23,34)"/><text x="3.5127%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (48 samples, 0.01%)</title><rect x="3.2651%" y="661" width="0.0115%" height="15" fill="rgb(218,30,26)"/><text x="3.5151%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (48 samples, 0.01%)</title><rect x="3.2651%" y="645" width="0.0115%" height="15" fill="rgb(220,122,19)"/><text x="3.5151%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.01%)</title><rect x="3.2651%" y="629" width="0.0115%" height="15" fill="rgb(250,228,42)"/><text x="3.5151%" y="639.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.01%)</title><rect x="3.2651%" y="613" width="0.0115%" height="15" fill="rgb(240,193,28)"/><text x="3.5151%" y="623.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (528 samples, 0.13%)</title><rect x="3.1536%" y="709" width="0.1263%" height="15" fill="rgb(216,20,37)"/><text x="3.4036%" y="719.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (72 samples, 0.02%)</title><rect x="3.2627%" y="693" width="0.0172%" height="15" fill="rgb(206,188,39)"/><text x="3.5127%" y="703.50"></text></g><g><title>[anon] (6,789 samples, 1.62%)</title><rect x="1.6565%" y="725" width="1.6244%" height="15" fill="rgb(217,207,13)"/><text x="1.9065%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,299 samples, 0.55%)</title><rect x="5.9395%" y="629" width="0.5501%" height="15" fill="rgb(231,73,38)"/><text x="6.1895%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2,299 samples, 0.55%)</title><rect x="5.9395%" y="613" width="0.5501%" height="15" fill="rgb(225,20,46)"/><text x="6.1895%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2,299 samples, 0.55%)</title><rect x="5.9395%" y="597" width="0.5501%" height="15" fill="rgb(210,31,41)"/><text x="6.1895%" y="607.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (15,462 samples, 3.70%)</title><rect x="3.3020%" y="709" width="3.6996%" height="15" fill="rgb(221,200,47)"/><text x="3.5520%" y="719.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,462 samples, 3.70%)</title><rect x="3.3020%" y="693" width="3.6996%" height="15" fill="rgb(226,26,5)"/><text x="3.5520%" y="703.50">&lt;cor..</text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (15,462 samples, 3.70%)</title><rect x="3.3020%" y="677" width="3.6996%" height="15" fill="rgb(249,33,26)"/><text x="3.5520%" y="687.50">&lt;cor..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (15,462 samples, 3.70%)</title><rect x="3.3020%" y="661" width="3.6996%" height="15" fill="rgb(235,183,28)"/><text x="3.5520%" y="671.50">core..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (4,439 samples, 1.06%)</title><rect x="5.9395%" y="645" width="1.0621%" height="15" fill="rgb(221,5,38)"/><text x="6.1895%" y="655.50"></text></g><g><title>core::slice::memchr::memchr (2,140 samples, 0.51%)</title><rect x="6.4896%" y="629" width="0.5120%" height="15" fill="rgb(247,18,42)"/><text x="6.7396%" y="639.50"></text></g><g><title>core::slice::memchr::memchr_general_case (251 samples, 0.06%)</title><rect x="7.0217%" y="709" width="0.0601%" height="15" fill="rgb(241,131,45)"/><text x="7.2717%" y="719.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (368 samples, 0.09%)</title><rect x="7.0818%" y="709" width="0.0881%" height="15" fill="rgb(249,31,29)"/><text x="7.3318%" y="719.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (415 samples, 0.10%)</title><rect x="7.1708%" y="709" width="0.0993%" height="15" fill="rgb(225,111,53)"/><text x="7.4208%" y="719.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (402 samples, 0.10%)</title><rect x="7.2701%" y="709" width="0.0962%" height="15" fill="rgb(238,160,17)"/><text x="7.5201%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (2,122 samples, 0.51%)</title><rect x="7.3682%" y="693" width="0.5077%" height="15" fill="rgb(214,148,48)"/><text x="7.6182%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (2,121 samples, 0.51%)</title><rect x="7.3684%" y="677" width="0.5075%" height="15" fill="rgb(232,36,49)"/><text x="7.6184%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,121 samples, 0.51%)</title><rect x="7.3684%" y="661" width="0.5075%" height="15" fill="rgb(209,103,24)"/><text x="7.6184%" y="671.50"></text></g><g><title>lab4::package::PackageDownloader::run (2,131 samples, 0.51%)</title><rect x="7.3675%" y="709" width="0.5099%" height="15" fill="rgb(229,88,8)"/><text x="7.6175%" y="719.50"></text></g><g><title>lab4::student::Student::run (272 samples, 0.07%)</title><rect x="7.8774%" y="709" width="0.0651%" height="15" fill="rgb(213,181,19)"/><text x="8.1274%" y="719.50"></text></g><g><title>[unknown] (19,493 samples, 4.66%)</title><rect x="3.2812%" y="725" width="4.6642%" height="15" fill="rgb(254,191,54)"/><text x="3.5312%" y="735.50">[unkn..</text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="709" width="0.0153%" height="15" fill="rgb(241,83,37)"/><text x="8.1953%" y="719.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="693" width="0.0153%" height="15" fill="rgb(233,36,39)"/><text x="8.1953%" y="703.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="677" width="0.0153%" height="15" fill="rgb(226,3,54)"/><text x="8.1953%" y="687.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="661" width="0.0153%" height="15" fill="rgb(245,192,40)"/><text x="8.1953%" y="671.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="645" width="0.0153%" height="15" fill="rgb(238,167,29)"/><text x="8.1953%" y="655.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="629" width="0.0153%" height="15" fill="rgb(232,182,51)"/><text x="8.1953%" y="639.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="613" width="0.0153%" height="15" fill="rgb(231,60,39)"/><text x="8.1953%" y="623.50"></text></g><g><title>[unknown] (64 samples, 0.02%)</title><rect x="7.9453%" y="597" width="0.0153%" height="15" fill="rgb(208,69,12)"/><text x="8.1953%" y="607.50"></text></g><g><title>__memcmp_avx2_movbe (5,886 samples, 1.41%)</title><rect x="13.2234%" y="309" width="1.4084%" height="15" fill="rgb(235,93,37)"/><text x="13.4734%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10,268 samples, 2.46%)</title><rect x="13.2038%" y="357" width="2.4569%" height="15" fill="rgb(213,116,39)"/><text x="13.4538%" y="367.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10,268 samples, 2.46%)</title><rect x="13.2038%" y="341" width="2.4569%" height="15" fill="rgb(222,207,29)"/><text x="13.4538%" y="351.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10,268 samples, 2.46%)</title><rect x="13.2038%" y="325" width="2.4569%" height="15" fill="rgb(206,96,30)"/><text x="13.4538%" y="335.50">&lt;[..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (4,300 samples, 1.03%)</title><rect x="14.6318%" y="309" width="1.0289%" height="15" fill="rgb(218,138,4)"/><text x="14.8818%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1,908 samples, 0.46%)</title><rect x="15.6607%" y="357" width="0.4565%" height="15" fill="rgb(250,191,14)"/><text x="15.9107%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1,908 samples, 0.46%)</title><rect x="15.6607%" y="341" width="0.4565%" height="15" fill="rgb(239,60,40)"/><text x="15.9107%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (144 samples, 0.03%)</title><rect x="16.1840%" y="341" width="0.0345%" height="15" fill="rgb(206,27,48)"/><text x="16.4340%" y="351.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (102 samples, 0.02%)</title><rect x="16.1940%" y="325" width="0.0244%" height="15" fill="rgb(225,35,8)"/><text x="16.4440%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,561 samples, 1.81%)</title><rect x="29.3837%" y="309" width="1.8091%" height="15" fill="rgb(250,213,24)"/><text x="29.6337%" y="319.50">&lt;..</text></g><g><title>[unknown] (56 samples, 0.01%)</title><rect x="31.1929%" y="309" width="0.0134%" height="15" fill="rgb(247,123,22)"/><text x="31.4429%" y="319.50"></text></g><g><title>[unknown] (54 samples, 0.01%)</title><rect x="31.1934%" y="293" width="0.0129%" height="15" fill="rgb(231,138,38)"/><text x="31.4434%" y="303.50"></text></g><g><title>[unknown] (53 samples, 0.01%)</title><rect x="31.1936%" y="277" width="0.0127%" height="15" fill="rgb(231,145,46)"/><text x="31.4436%" y="287.50"></text></g><g><title>[unknown] (52 samples, 0.01%)</title><rect x="31.1938%" y="261" width="0.0124%" height="15" fill="rgb(251,118,11)"/><text x="31.4438%" y="271.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="31.1941%" y="245" width="0.0122%" height="15" fill="rgb(217,147,25)"/><text x="31.4441%" y="255.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="31.1941%" y="229" width="0.0122%" height="15" fill="rgb(247,81,37)"/><text x="31.4441%" y="239.50"></text></g><g><title>[unknown] (48 samples, 0.01%)</title><rect x="31.1948%" y="213" width="0.0115%" height="15" fill="rgb(209,12,38)"/><text x="31.4448%" y="223.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="31.1955%" y="197" width="0.0108%" height="15" fill="rgb(227,1,9)"/><text x="31.4455%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (42,228 samples, 10.10%)</title><rect x="24.5250%" y="325" width="10.1040%" height="15" fill="rgb(248,47,43)"/><text x="24.7750%" y="335.50">&lt;core::slice::i..</text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (14,305 samples, 3.42%)</title><rect x="31.2063%" y="309" width="3.4228%" height="15" fill="rgb(221,10,30)"/><text x="31.4563%" y="319.50">cor..</text></g><g><title>[unknown] (93 samples, 0.02%)</title><rect x="34.6291%" y="325" width="0.0223%" height="15" fill="rgb(210,229,1)"/><text x="34.8791%" y="335.50"></text></g><g><title>[unknown] (91 samples, 0.02%)</title><rect x="34.6296%" y="309" width="0.0218%" height="15" fill="rgb(222,148,37)"/><text x="34.8796%" y="319.50"></text></g><g><title>[unknown] (91 samples, 0.02%)</title><rect x="34.6296%" y="293" width="0.0218%" height="15" fill="rgb(234,67,33)"/><text x="34.8796%" y="303.50"></text></g><g><title>[unknown] (88 samples, 0.02%)</title><rect x="34.6303%" y="277" width="0.0211%" height="15" fill="rgb(247,98,35)"/><text x="34.8803%" y="287.50"></text></g><g><title>[unknown] (87 samples, 0.02%)</title><rect x="34.6305%" y="261" width="0.0208%" height="15" fill="rgb(247,138,52)"/><text x="34.8805%" y="271.50"></text></g><g><title>[unknown] (87 samples, 0.02%)</title><rect x="34.6305%" y="245" width="0.0208%" height="15" fill="rgb(213,79,30)"/><text x="34.8805%" y="255.50"></text></g><g><title>[unknown] (86 samples, 0.02%)</title><rect x="34.6308%" y="229" width="0.0206%" height="15" fill="rgb(246,177,23)"/><text x="34.8808%" y="239.50"></text></g><g><title>[unknown] (83 samples, 0.02%)</title><rect x="34.6315%" y="213" width="0.0199%" height="15" fill="rgb(230,62,27)"/><text x="34.8815%" y="223.50"></text></g><g><title>[unknown] (80 samples, 0.02%)</title><rect x="34.6322%" y="197" width="0.0191%" height="15" fill="rgb(216,154,8)"/><text x="34.8822%" y="207.50"></text></g><g><title>[unknown] (67 samples, 0.02%)</title><rect x="34.6353%" y="181" width="0.0160%" height="15" fill="rgb(244,35,45)"/><text x="34.8853%" y="191.50"></text></g><g><title>[unknown] (63 samples, 0.02%)</title><rect x="34.6363%" y="165" width="0.0151%" height="15" fill="rgb(251,115,12)"/><text x="34.8863%" y="175.50"></text></g><g><title>[unknown] (56 samples, 0.01%)</title><rect x="34.6379%" y="149" width="0.0134%" height="15" fill="rgb(240,54,50)"/><text x="34.8879%" y="159.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="34.6391%" y="133" width="0.0122%" height="15" fill="rgb(233,84,52)"/><text x="34.8891%" y="143.50"></text></g><g><title>core::cmp::min (2,557 samples, 0.61%)</title><rect x="34.6513%" y="325" width="0.6118%" height="15" fill="rgb(207,117,47)"/><text x="34.9013%" y="335.50"></text></g><g><title>core::cmp::Ord::min (2,557 samples, 0.61%)</title><rect x="34.6513%" y="309" width="0.6118%" height="15" fill="rgb(249,43,39)"/><text x="34.9013%" y="319.50"></text></g><g><title>core::cmp::min_by (2,557 samples, 0.61%)</title><rect x="34.6513%" y="293" width="0.6118%" height="15" fill="rgb(209,38,44)"/><text x="34.9013%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::align_offset (1,792 samples, 0.43%)</title><rect x="35.2632%" y="325" width="0.4288%" height="15" fill="rgb(236,212,23)"/><text x="35.5132%" y="335.50"></text></g><g><title>core::ptr::align_offset (1,792 samples, 0.43%)</title><rect x="35.2632%" y="309" width="0.4288%" height="15" fill="rgb(242,79,21)"/><text x="35.5132%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,126 samples, 0.27%)</title><rect x="35.6919%" y="325" width="0.2694%" height="15" fill="rgb(211,96,35)"/><text x="35.9419%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,126 samples, 0.27%)</title><rect x="35.6919%" y="309" width="0.2694%" height="15" fill="rgb(253,215,40)"/><text x="35.9419%" y="319.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (9,392 samples, 2.25%)</title><rect x="35.9614%" y="325" width="2.2473%" height="15" fill="rgb(211,81,21)"/><text x="36.2114%" y="335.50">c..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (5,746 samples, 1.37%)</title><rect x="36.8337%" y="309" width="1.3749%" height="15" fill="rgb(208,190,38)"/><text x="37.0837%" y="319.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (122,378 samples, 29.28%)</title><rect x="9.3420%" y="373" width="29.2818%" height="15" fill="rgb(235,213,38)"/><text x="9.5920%" y="383.50">&lt;core::str::pattern::CharSearcher as core::str:..</text></g><g><title>core::slice::memchr::memchr (94,025 samples, 22.50%)</title><rect x="16.1261%" y="357" width="22.4977%" height="15" fill="rgb(237,122,38)"/><text x="16.3761%" y="367.50">core::slice::memchr::memchr</text></g><g><title>core::slice::memchr::memchr_general_case (93,633 samples, 22.40%)</title><rect x="16.2199%" y="341" width="22.4039%" height="15" fill="rgb(244,218,35)"/><text x="16.4699%" y="351.50">core::slice::memchr::memchr_general..</text></g><g><title>core::slice::memchr::repeat_byte (1,735 samples, 0.42%)</title><rect x="38.2086%" y="325" width="0.4151%" height="15" fill="rgb(240,68,47)"/><text x="38.4586%" y="335.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="38.6237%" y="373" width="0.0108%" height="15" fill="rgb(210,16,53)"/><text x="38.8737%" y="383.50"></text></g><g><title>[unknown] (43 samples, 0.01%)</title><rect x="38.6242%" y="357" width="0.0103%" height="15" fill="rgb(235,124,12)"/><text x="38.8742%" y="367.50"></text></g><g><title>[unknown] (43 samples, 0.01%)</title><rect x="38.6242%" y="341" width="0.0103%" height="15" fill="rgb(224,169,11)"/><text x="38.8742%" y="351.50"></text></g><g><title>[unknown] (42 samples, 0.01%)</title><rect x="38.6245%" y="325" width="0.0100%" height="15" fill="rgb(250,166,2)"/><text x="38.8745%" y="335.50"></text></g><g><title>[unknown] (42 samples, 0.01%)</title><rect x="38.6245%" y="309" width="0.0100%" height="15" fill="rgb(242,216,29)"/><text x="38.8745%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::get_unchecked (254 samples, 0.06%)</title><rect x="38.6345%" y="373" width="0.0608%" height="15" fill="rgb(230,116,27)"/><text x="38.8845%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get_unchecked (254 samples, 0.06%)</title><rect x="38.6345%" y="357" width="0.0608%" height="15" fill="rgb(228,99,48)"/><text x="38.8845%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (223 samples, 0.05%)</title><rect x="38.6419%" y="341" width="0.0534%" height="15" fill="rgb(253,11,6)"/><text x="38.8919%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (223 samples, 0.05%)</title><rect x="38.6419%" y="325" width="0.0534%" height="15" fill="rgb(247,143,39)"/><text x="38.8919%" y="335.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (126,367 samples, 30.24%)</title><rect x="8.4643%" y="405" width="30.2363%" height="15" fill="rgb(236,97,10)"/><text x="8.7143%" y="415.50">&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::ite..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (126,367 samples, 30.24%)</title><rect x="8.4643%" y="389" width="30.2363%" height="15" fill="rgb(233,208,19)"/><text x="8.7143%" y="399.50">core::str::iter::SplitInternal&lt;P&gt;::next</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (134,550 samples, 32.19%)</title><rect x="8.4643%" y="421" width="32.1942%" height="15" fill="rgb(216,164,2)"/><text x="8.7143%" y="431.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::trait..</text></g><g><title>core::option::Option&lt;T&gt;::map (8,183 samples, 1.96%)</title><rect x="38.7006%" y="405" width="1.9580%" height="15" fill="rgb(220,129,5)"/><text x="38.9506%" y="415.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8,183 samples, 1.96%)</title><rect x="38.7006%" y="389" width="1.9580%" height="15" fill="rgb(242,17,10)"/><text x="38.9506%" y="399.50">c..</text></g><g><title>&lt;core::str::LinesAnyMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (8,183 samples, 1.96%)</title><rect x="38.7006%" y="373" width="1.9580%" height="15" fill="rgb(242,107,0)"/><text x="38.9506%" y="383.50">&lt;..</text></g><g><title>&lt;core::str::LinesAnyMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (8,183 samples, 1.96%)</title><rect x="38.7006%" y="357" width="1.9580%" height="15" fill="rgb(251,28,31)"/><text x="38.9506%" y="367.50">&lt;..</text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (134,562 samples, 32.20%)</title><rect x="8.4633%" y="437" width="32.1971%" height="15" fill="rgb(233,223,10)"/><text x="8.7133%" y="447.50">&lt;core::str::iter::Lines as core::iter::traits::itera..</text></g><g><title>&lt;core::iter::adapters::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (136,603 samples, 32.69%)</title><rect x="7.9774%" y="453" width="32.6855%" height="15" fill="rgb(215,21,27)"/><text x="8.2274%" y="463.50">&lt;core::iter::adapters::Cycle&lt;I&gt; as core::iter::traits..</text></g><g><title>core::iter::traits::iterator::Iterator::nth (136,647 samples, 32.70%)</title><rect x="7.9747%" y="485" width="32.6960%" height="15" fill="rgb(232,23,21)"/><text x="8.2247%" y="495.50">core::iter::traits::iterator::Iterator::nth</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (136,636 samples, 32.69%)</title><rect x="7.9774%" y="469" width="32.6934%" height="15" fill="rgb(244,5,23)"/><text x="8.2274%" y="479.50">core::iter::traits::iterator::Iterator::advance_by</text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (86 samples, 0.02%)</title><rect x="40.6944%" y="437" width="0.0206%" height="15" fill="rgb(226,81,46)"/><text x="40.9444%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (86 samples, 0.02%)</title><rect x="40.6944%" y="421" width="0.0206%" height="15" fill="rgb(247,70,30)"/><text x="40.9444%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (629 samples, 0.15%)</title><rect x="40.7150%" y="437" width="0.1505%" height="15" fill="rgb(212,68,19)"/><text x="40.9650%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (629 samples, 0.15%)</title><rect x="40.7150%" y="421" width="0.1505%" height="15" fill="rgb(240,187,13)"/><text x="40.9650%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (40,040 samples, 9.58%)</title><rect x="40.6815%" y="453" width="9.5805%" height="15" fill="rgb(223,113,26)"/><text x="40.9315%" y="463.50">crossbeam_chan..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (39,219 samples, 9.38%)</title><rect x="40.8779%" y="437" width="9.3841%" height="15" fill="rgb(206,192,2)"/><text x="41.1279%" y="447.50">crossbeam_uti..</text></g><g><title>core::sync::atomic::spin_loop_hint (39,170 samples, 9.37%)</title><rect x="40.8897%" y="421" width="9.3723%" height="15" fill="rgb(241,108,4)"/><text x="41.1397%" y="431.50">core::sync::a..</text></g><g><title>core::hint::spin_loop (39,170 samples, 9.37%)</title><rect x="40.8897%" y="405" width="9.3723%" height="15" fill="rgb(247,173,49)"/><text x="41.1397%" y="415.50">core::hint::s..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (39,170 samples, 9.37%)</title><rect x="40.8897%" y="389" width="9.3723%" height="15" fill="rgb(224,114,35)"/><text x="41.1397%" y="399.50">core::core_ar..</text></g><g><title>[unknown] (77 samples, 0.02%)</title><rect x="50.2436%" y="373" width="0.0184%" height="15" fill="rgb(245,159,27)"/><text x="50.4936%" y="383.50"></text></g><g><title>[unknown] (71 samples, 0.02%)</title><rect x="50.2450%" y="357" width="0.0170%" height="15" fill="rgb(245,172,44)"/><text x="50.4950%" y="367.50"></text></g><g><title>[unknown] (71 samples, 0.02%)</title><rect x="50.2450%" y="341" width="0.0170%" height="15" fill="rgb(236,23,11)"/><text x="50.4950%" y="351.50"></text></g><g><title>[unknown] (70 samples, 0.02%)</title><rect x="50.2453%" y="325" width="0.0167%" height="15" fill="rgb(205,117,38)"/><text x="50.4953%" y="335.50"></text></g><g><title>[unknown] (70 samples, 0.02%)</title><rect x="50.2453%" y="309" width="0.0167%" height="15" fill="rgb(237,72,25)"/><text x="50.4953%" y="319.50"></text></g><g><title>[unknown] (66 samples, 0.02%)</title><rect x="50.2462%" y="293" width="0.0158%" height="15" fill="rgb(244,70,9)"/><text x="50.4962%" y="303.50"></text></g><g><title>[unknown] (61 samples, 0.01%)</title><rect x="50.2474%" y="277" width="0.0146%" height="15" fill="rgb(217,125,39)"/><text x="50.4974%" y="287.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="50.2488%" y="261" width="0.0132%" height="15" fill="rgb(235,36,10)"/><text x="50.4988%" y="271.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="50.2498%" y="245" width="0.0122%" height="15" fill="rgb(251,123,47)"/><text x="50.4998%" y="255.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (40,057 samples, 9.58%)</title><rect x="40.6805%" y="485" width="9.5846%" height="15" fill="rgb(221,13,13)"/><text x="40.9305%" y="495.50">crossbeam_chan..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (40,054 samples, 9.58%)</title><rect x="40.6813%" y="469" width="9.5839%" height="15" fill="rgb(238,131,9)"/><text x="40.9313%" y="479.50">crossbeam_chan..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (115 samples, 0.03%)</title><rect x="50.2742%" y="181" width="0.0275%" height="15" fill="rgb(211,50,8)"/><text x="50.5242%" y="191.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (109 samples, 0.03%)</title><rect x="50.2756%" y="165" width="0.0261%" height="15" fill="rgb(245,182,24)"/><text x="50.5256%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (108 samples, 0.03%)</title><rect x="50.2759%" y="149" width="0.0258%" height="15" fill="rgb(242,14,37)"/><text x="50.5259%" y="159.50"></text></g><g><title>hex::val (72 samples, 0.02%)</title><rect x="50.2845%" y="133" width="0.0172%" height="15" fill="rgb(246,228,12)"/><text x="50.5345%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 0.03%)</title><rect x="50.2733%" y="277" width="0.0316%" height="15" fill="rgb(213,55,15)"/><text x="50.5233%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (131 samples, 0.03%)</title><rect x="50.2735%" y="261" width="0.0313%" height="15" fill="rgb(209,9,3)"/><text x="50.5235%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (131 samples, 0.03%)</title><rect x="50.2735%" y="245" width="0.0313%" height="15" fill="rgb(230,59,30)"/><text x="50.5235%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (128 samples, 0.03%)</title><rect x="50.2742%" y="229" width="0.0306%" height="15" fill="rgb(209,121,21)"/><text x="50.5242%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (128 samples, 0.03%)</title><rect x="50.2742%" y="213" width="0.0306%" height="15" fill="rgb(220,109,13)"/><text x="50.5242%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (128 samples, 0.03%)</title><rect x="50.2742%" y="197" width="0.0306%" height="15" fill="rgb(232,18,1)"/><text x="50.5242%" y="207.50"></text></g><g><title>__GI___libc_realloc (42 samples, 0.01%)</title><rect x="50.3065%" y="149" width="0.0100%" height="15" fill="rgb(215,41,42)"/><text x="50.5565%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (44 samples, 0.01%)</title><rect x="50.3065%" y="277" width="0.0105%" height="15" fill="rgb(224,123,36)"/><text x="50.5565%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (44 samples, 0.01%)</title><rect x="50.3065%" y="261" width="0.0105%" height="15" fill="rgb(240,125,3)"/><text x="50.5565%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (44 samples, 0.01%)</title><rect x="50.3065%" y="245" width="0.0105%" height="15" fill="rgb(205,98,50)"/><text x="50.5565%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (44 samples, 0.01%)</title><rect x="50.3065%" y="229" width="0.0105%" height="15" fill="rgb(205,185,37)"/><text x="50.5565%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (44 samples, 0.01%)</title><rect x="50.3065%" y="213" width="0.0105%" height="15" fill="rgb(238,207,15)"/><text x="50.5565%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (44 samples, 0.01%)</title><rect x="50.3065%" y="197" width="0.0105%" height="15" fill="rgb(213,199,42)"/><text x="50.5565%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (44 samples, 0.01%)</title><rect x="50.3065%" y="181" width="0.0105%" height="15" fill="rgb(235,201,11)"/><text x="50.5565%" y="191.50"></text></g><g><title>alloc::alloc::realloc (44 samples, 0.01%)</title><rect x="50.3065%" y="165" width="0.0105%" height="15" fill="rgb(207,46,11)"/><text x="50.5565%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (196 samples, 0.05%)</title><rect x="50.2718%" y="309" width="0.0469%" height="15" fill="rgb(241,35,35)"/><text x="50.5218%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (196 samples, 0.05%)</title><rect x="50.2718%" y="293" width="0.0469%" height="15" fill="rgb(243,32,47)"/><text x="50.5218%" y="303.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (225 samples, 0.05%)</title><rect x="50.2713%" y="389" width="0.0538%" height="15" fill="rgb(247,202,23)"/><text x="50.5213%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (225 samples, 0.05%)</title><rect x="50.2713%" y="373" width="0.0538%" height="15" fill="rgb(219,102,11)"/><text x="50.5213%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (225 samples, 0.05%)</title><rect x="50.2713%" y="357" width="0.0538%" height="15" fill="rgb(243,110,44)"/><text x="50.5213%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (225 samples, 0.05%)</title><rect x="50.2713%" y="341" width="0.0538%" height="15" fill="rgb(222,74,54)"/><text x="50.5213%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (225 samples, 0.05%)</title><rect x="50.2713%" y="325" width="0.0538%" height="15" fill="rgb(216,99,12)"/><text x="50.5213%" y="335.50"></text></g><g><title>hex::decode (227 samples, 0.05%)</title><rect x="50.2713%" y="469" width="0.0543%" height="15" fill="rgb(226,22,26)"/><text x="50.5213%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (227 samples, 0.05%)</title><rect x="50.2713%" y="453" width="0.0543%" height="15" fill="rgb(217,163,10)"/><text x="50.5213%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (227 samples, 0.05%)</title><rect x="50.2713%" y="437" width="0.0543%" height="15" fill="rgb(213,25,53)"/><text x="50.5213%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (227 samples, 0.05%)</title><rect x="50.2713%" y="421" width="0.0543%" height="15" fill="rgb(252,105,26)"/><text x="50.5213%" y="431.50"></text></g><g><title>core::iter::adapters::process_results (227 samples, 0.05%)</title><rect x="50.2713%" y="405" width="0.0543%" height="15" fill="rgb(220,39,43)"/><text x="50.5213%" y="415.50"></text></g><g><title>lab4::checksum::Checksum::update (285 samples, 0.07%)</title><rect x="50.2651%" y="485" width="0.0682%" height="15" fill="rgb(229,68,48)"/><text x="50.5151%" y="495.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (81 samples, 0.02%)</title><rect x="50.3333%" y="469" width="0.0194%" height="15" fill="rgb(252,8,32)"/><text x="50.5833%" y="479.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (77 samples, 0.02%)</title><rect x="50.3343%" y="453" width="0.0184%" height="15" fill="rgb(223,20,43)"/><text x="50.5843%" y="463.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (77 samples, 0.02%)</title><rect x="50.3343%" y="437" width="0.0184%" height="15" fill="rgb(229,81,49)"/><text x="50.5843%" y="447.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (77 samples, 0.02%)</title><rect x="50.3343%" y="421" width="0.0184%" height="15" fill="rgb(236,28,36)"/><text x="50.5843%" y="431.50"></text></g><g><title>sha2::sha256::Engine256::finish (77 samples, 0.02%)</title><rect x="50.3343%" y="405" width="0.0184%" height="15" fill="rgb(249,185,26)"/><text x="50.5843%" y="415.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (77 samples, 0.02%)</title><rect x="50.3343%" y="389" width="0.0184%" height="15" fill="rgb(249,174,33)"/><text x="50.5843%" y="399.50"></text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (70 samples, 0.02%)</title><rect x="50.3359%" y="373" width="0.0167%" height="15" fill="rgb(233,201,37)"/><text x="50.5859%" y="383.50"></text></g><g><title>sha2::sha256::compress256 (70 samples, 0.02%)</title><rect x="50.3359%" y="357" width="0.0167%" height="15" fill="rgb(221,78,26)"/><text x="50.5859%" y="367.50"></text></g><g><title>sha2::sha256::x86::compress (70 samples, 0.02%)</title><rect x="50.3359%" y="341" width="0.0167%" height="15" fill="rgb(250,127,30)"/><text x="50.5859%" y="351.50"></text></g><g><title>sha2::sha256::soft::compress (69 samples, 0.02%)</title><rect x="50.3362%" y="325" width="0.0165%" height="15" fill="rgb(230,49,44)"/><text x="50.5862%" y="335.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (63 samples, 0.02%)</title><rect x="50.3376%" y="309" width="0.0151%" height="15" fill="rgb(229,67,23)"/><text x="50.5876%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (50 samples, 0.01%)</title><rect x="50.3527%" y="421" width="0.0120%" height="15" fill="rgb(249,83,47)"/><text x="50.6027%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (49 samples, 0.01%)</title><rect x="50.3529%" y="405" width="0.0117%" height="15" fill="rgb(215,43,3)"/><text x="50.6029%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (48 samples, 0.01%)</title><rect x="50.3532%" y="389" width="0.0115%" height="15" fill="rgb(238,154,13)"/><text x="50.6032%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (42 samples, 0.01%)</title><rect x="50.3546%" y="373" width="0.0100%" height="15" fill="rgb(219,56,2)"/><text x="50.6046%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (42 samples, 0.01%)</title><rect x="50.3546%" y="357" width="0.0100%" height="15" fill="rgb(233,0,4)"/><text x="50.6046%" y="367.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (133 samples, 0.03%)</title><rect x="50.3333%" y="485" width="0.0318%" height="15" fill="rgb(235,30,7)"/><text x="50.5833%" y="495.50"></text></g><g><title>hex::encode (52 samples, 0.01%)</title><rect x="50.3527%" y="469" width="0.0124%" height="15" fill="rgb(250,79,13)"/><text x="50.6027%" y="479.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (52 samples, 0.01%)</title><rect x="50.3527%" y="453" width="0.0124%" height="15" fill="rgb(211,146,34)"/><text x="50.6027%" y="463.50"></text></g><g><title>hex::encode_to_iter (52 samples, 0.01%)</title><rect x="50.3527%" y="437" width="0.0124%" height="15" fill="rgb(228,22,38)"/><text x="50.6027%" y="447.50"></text></g><g><title>[unknown] (87 samples, 0.02%)</title><rect x="50.3663%" y="437" width="0.0208%" height="15" fill="rgb(235,168,5)"/><text x="50.6163%" y="447.50"></text></g><g><title>[unknown] (79 samples, 0.02%)</title><rect x="50.3682%" y="421" width="0.0189%" height="15" fill="rgb(221,155,16)"/><text x="50.6182%" y="431.50"></text></g><g><title>[unknown] (75 samples, 0.02%)</title><rect x="50.3692%" y="405" width="0.0179%" height="15" fill="rgb(215,215,53)"/><text x="50.6192%" y="415.50"></text></g><g><title>[unknown] (72 samples, 0.02%)</title><rect x="50.3699%" y="389" width="0.0172%" height="15" fill="rgb(223,4,10)"/><text x="50.6199%" y="399.50"></text></g><g><title>[unknown] (63 samples, 0.02%)</title><rect x="50.3721%" y="373" width="0.0151%" height="15" fill="rgb(234,103,6)"/><text x="50.6221%" y="383.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="50.3749%" y="357" width="0.0122%" height="15" fill="rgb(227,97,0)"/><text x="50.6249%" y="367.50"></text></g><g><title>[unknown] (49 samples, 0.01%)</title><rect x="50.3754%" y="341" width="0.0117%" height="15" fill="rgb(234,150,53)"/><text x="50.6254%" y="351.50"></text></g><g><title>__close (90 samples, 0.02%)</title><rect x="50.3661%" y="453" width="0.0215%" height="15" fill="rgb(228,201,54)"/><text x="50.6161%" y="463.50"></text></g><g><title>[unknown] (460 samples, 0.11%)</title><rect x="50.4008%" y="325" width="0.1101%" height="15" fill="rgb(222,22,37)"/><text x="50.6508%" y="335.50"></text></g><g><title>[unknown] (454 samples, 0.11%)</title><rect x="50.4022%" y="309" width="0.1086%" height="15" fill="rgb(237,53,32)"/><text x="50.6522%" y="319.50"></text></g><g><title>[unknown] (444 samples, 0.11%)</title><rect x="50.4046%" y="293" width="0.1062%" height="15" fill="rgb(233,25,53)"/><text x="50.6546%" y="303.50"></text></g><g><title>[unknown] (441 samples, 0.11%)</title><rect x="50.4053%" y="277" width="0.1055%" height="15" fill="rgb(210,40,34)"/><text x="50.6553%" y="287.50"></text></g><g><title>[unknown] (434 samples, 0.10%)</title><rect x="50.4070%" y="261" width="0.1038%" height="15" fill="rgb(241,220,44)"/><text x="50.6570%" y="271.50"></text></g><g><title>[unknown] (419 samples, 0.10%)</title><rect x="50.4106%" y="245" width="0.1003%" height="15" fill="rgb(235,28,35)"/><text x="50.6606%" y="255.50"></text></g><g><title>[unknown] (403 samples, 0.10%)</title><rect x="50.4144%" y="229" width="0.0964%" height="15" fill="rgb(210,56,17)"/><text x="50.6644%" y="239.50"></text></g><g><title>[unknown] (362 samples, 0.09%)</title><rect x="50.4242%" y="213" width="0.0866%" height="15" fill="rgb(224,130,29)"/><text x="50.6742%" y="223.50"></text></g><g><title>[unknown] (307 samples, 0.07%)</title><rect x="50.4374%" y="197" width="0.0735%" height="15" fill="rgb(235,212,8)"/><text x="50.6874%" y="207.50"></text></g><g><title>[unknown] (255 samples, 0.06%)</title><rect x="50.4498%" y="181" width="0.0610%" height="15" fill="rgb(223,33,50)"/><text x="50.6998%" y="191.50"></text></g><g><title>[unknown] (204 samples, 0.05%)</title><rect x="50.4620%" y="165" width="0.0488%" height="15" fill="rgb(219,149,13)"/><text x="50.7120%" y="175.50"></text></g><g><title>[unknown] (144 samples, 0.03%)</title><rect x="50.4764%" y="149" width="0.0345%" height="15" fill="rgb(250,156,29)"/><text x="50.7264%" y="159.50"></text></g><g><title>[unknown] (105 samples, 0.03%)</title><rect x="50.4857%" y="133" width="0.0251%" height="15" fill="rgb(216,193,19)"/><text x="50.7357%" y="143.50"></text></g><g><title>[unknown] (93 samples, 0.02%)</title><rect x="50.4886%" y="117" width="0.0223%" height="15" fill="rgb(216,135,14)"/><text x="50.7386%" y="127.50"></text></g><g><title>[unknown] (73 samples, 0.02%)</title><rect x="50.4934%" y="101" width="0.0175%" height="15" fill="rgb(241,47,5)"/><text x="50.7434%" y="111.50"></text></g><g><title>[unknown] (67 samples, 0.02%)</title><rect x="50.4948%" y="85" width="0.0160%" height="15" fill="rgb(233,42,35)"/><text x="50.7448%" y="95.50"></text></g><g><title>[unknown] (56 samples, 0.01%)</title><rect x="50.4974%" y="69" width="0.0134%" height="15" fill="rgb(231,13,6)"/><text x="50.7474%" y="79.50"></text></g><g><title>std::sys::unix::cvt_r (472 samples, 0.11%)</title><rect x="50.3991%" y="373" width="0.1129%" height="15" fill="rgb(207,181,40)"/><text x="50.6491%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (470 samples, 0.11%)</title><rect x="50.3996%" y="357" width="0.1125%" height="15" fill="rgb(254,173,49)"/><text x="50.6496%" y="367.50"></text></g><g><title>__libc_open64 (470 samples, 0.11%)</title><rect x="50.3996%" y="341" width="0.1125%" height="15" fill="rgb(221,1,38)"/><text x="50.6496%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::open_c (476 samples, 0.11%)</title><rect x="50.3984%" y="389" width="0.1139%" height="15" fill="rgb(206,124,46)"/><text x="50.6484%" y="399.50"></text></g><g><title>std::fs::File::open (526 samples, 0.13%)</title><rect x="50.3960%" y="453" width="0.1259%" height="15" fill="rgb(249,21,11)"/><text x="50.6460%" y="463.50"></text></g><g><title>std::fs::OpenOptions::open (526 samples, 0.13%)</title><rect x="50.3960%" y="437" width="0.1259%" height="15" fill="rgb(222,201,40)"/><text x="50.6460%" y="447.50"></text></g><g><title>std::fs::OpenOptions::_open (524 samples, 0.13%)</title><rect x="50.3965%" y="421" width="0.1254%" height="15" fill="rgb(235,61,29)"/><text x="50.6465%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open (524 samples, 0.13%)</title><rect x="50.3965%" y="405" width="0.1254%" height="15" fill="rgb(219,207,3)"/><text x="50.6465%" y="415.50"></text></g><g><title>std::fs::initial_buffer_size (191 samples, 0.05%)</title><rect x="50.5219%" y="453" width="0.0457%" height="15" fill="rgb(222,56,46)"/><text x="50.7719%" y="463.50"></text></g><g><title>std::fs::File::metadata (191 samples, 0.05%)</title><rect x="50.5219%" y="437" width="0.0457%" height="15" fill="rgb(239,76,54)"/><text x="50.7719%" y="447.50"></text></g><g><title>std::sys::unix::fs::File::file_attr (191 samples, 0.05%)</title><rect x="50.5219%" y="421" width="0.0457%" height="15" fill="rgb(231,124,27)"/><text x="50.7719%" y="431.50"></text></g><g><title>std::sys::unix::fs::try_statx (189 samples, 0.05%)</title><rect x="50.5223%" y="405" width="0.0452%" height="15" fill="rgb(249,195,6)"/><text x="50.7723%" y="415.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (177 samples, 0.04%)</title><rect x="50.5252%" y="389" width="0.0424%" height="15" fill="rgb(237,174,47)"/><text x="50.7752%" y="399.50"></text></g><g><title>syscall (177 samples, 0.04%)</title><rect x="50.5252%" y="373" width="0.0424%" height="15" fill="rgb(206,201,31)"/><text x="50.7752%" y="383.50"></text></g><g><title>[unknown] (172 samples, 0.04%)</title><rect x="50.5264%" y="357" width="0.0412%" height="15" fill="rgb(231,57,52)"/><text x="50.7764%" y="367.50"></text></g><g><title>[unknown] (163 samples, 0.04%)</title><rect x="50.5286%" y="341" width="0.0390%" height="15" fill="rgb(248,177,22)"/><text x="50.7786%" y="351.50"></text></g><g><title>[unknown] (159 samples, 0.04%)</title><rect x="50.5295%" y="325" width="0.0380%" height="15" fill="rgb(215,211,37)"/><text x="50.7795%" y="335.50"></text></g><g><title>[unknown] (156 samples, 0.04%)</title><rect x="50.5302%" y="309" width="0.0373%" height="15" fill="rgb(241,128,51)"/><text x="50.7802%" y="319.50"></text></g><g><title>[unknown] (153 samples, 0.04%)</title><rect x="50.5309%" y="293" width="0.0366%" height="15" fill="rgb(227,165,31)"/><text x="50.7809%" y="303.50"></text></g><g><title>[unknown] (139 samples, 0.03%)</title><rect x="50.5343%" y="277" width="0.0333%" height="15" fill="rgb(228,167,24)"/><text x="50.7843%" y="287.50"></text></g><g><title>[unknown] (130 samples, 0.03%)</title><rect x="50.5365%" y="261" width="0.0311%" height="15" fill="rgb(228,143,12)"/><text x="50.7865%" y="271.50"></text></g><g><title>[unknown] (119 samples, 0.03%)</title><rect x="50.5391%" y="245" width="0.0285%" height="15" fill="rgb(249,149,8)"/><text x="50.7891%" y="255.50"></text></g><g><title>[unknown] (89 samples, 0.02%)</title><rect x="50.5463%" y="229" width="0.0213%" height="15" fill="rgb(243,35,44)"/><text x="50.7963%" y="239.50"></text></g><g><title>[unknown] (62 samples, 0.01%)</title><rect x="50.5527%" y="213" width="0.0148%" height="15" fill="rgb(246,89,9)"/><text x="50.8027%" y="223.50"></text></g><g><title>[unknown] (57 samples, 0.01%)</title><rect x="50.5539%" y="197" width="0.0136%" height="15" fill="rgb(233,213,13)"/><text x="50.8039%" y="207.50"></text></g><g><title>[unknown] (50 samples, 0.01%)</title><rect x="50.5556%" y="181" width="0.0120%" height="15" fill="rgb(233,141,41)"/><text x="50.8056%" y="191.50"></text></g><g><title>[unknown] (46 samples, 0.01%)</title><rect x="50.5565%" y="165" width="0.0110%" height="15" fill="rgb(239,167,4)"/><text x="50.8065%" y="175.50"></text></g><g><title>[unknown] (43 samples, 0.01%)</title><rect x="50.5573%" y="149" width="0.0103%" height="15" fill="rgb(209,217,16)"/><text x="50.8073%" y="159.50"></text></g><g><title>[unknown] (42 samples, 0.01%)</title><rect x="50.5575%" y="133" width="0.0100%" height="15" fill="rgb(219,88,35)"/><text x="50.8075%" y="143.50"></text></g><g><title>core::str::converts::from_utf8 (56 samples, 0.01%)</title><rect x="50.5676%" y="421" width="0.0134%" height="15" fill="rgb(220,193,23)"/><text x="50.8176%" y="431.50"></text></g><g><title>core::str::validations::run_utf8_validation (53 samples, 0.01%)</title><rect x="50.5683%" y="405" width="0.0127%" height="15" fill="rgb(230,90,52)"/><text x="50.8183%" y="415.50"></text></g><g><title>[unknown] (234 samples, 0.06%)</title><rect x="50.5826%" y="293" width="0.0560%" height="15" fill="rgb(252,106,19)"/><text x="50.8326%" y="303.50"></text></g><g><title>[unknown] (224 samples, 0.05%)</title><rect x="50.5850%" y="277" width="0.0536%" height="15" fill="rgb(206,74,20)"/><text x="50.8350%" y="287.50"></text></g><g><title>[unknown] (221 samples, 0.05%)</title><rect x="50.5857%" y="261" width="0.0529%" height="15" fill="rgb(230,138,44)"/><text x="50.8357%" y="271.50"></text></g><g><title>[unknown] (219 samples, 0.05%)</title><rect x="50.5862%" y="245" width="0.0524%" height="15" fill="rgb(235,182,43)"/><text x="50.8362%" y="255.50"></text></g><g><title>[unknown] (214 samples, 0.05%)</title><rect x="50.5874%" y="229" width="0.0512%" height="15" fill="rgb(242,16,51)"/><text x="50.8374%" y="239.50"></text></g><g><title>[unknown] (198 samples, 0.05%)</title><rect x="50.5912%" y="213" width="0.0474%" height="15" fill="rgb(248,9,4)"/><text x="50.8412%" y="223.50"></text></g><g><title>[unknown] (182 samples, 0.04%)</title><rect x="50.5951%" y="197" width="0.0435%" height="15" fill="rgb(210,31,22)"/><text x="50.8451%" y="207.50"></text></g><g><title>[unknown] (160 samples, 0.04%)</title><rect x="50.6003%" y="181" width="0.0383%" height="15" fill="rgb(239,54,39)"/><text x="50.8503%" y="191.50"></text></g><g><title>[unknown] (151 samples, 0.04%)</title><rect x="50.6025%" y="165" width="0.0361%" height="15" fill="rgb(230,99,41)"/><text x="50.8525%" y="175.50"></text></g><g><title>[unknown] (121 samples, 0.03%)</title><rect x="50.6097%" y="149" width="0.0290%" height="15" fill="rgb(253,106,12)"/><text x="50.8597%" y="159.50"></text></g><g><title>[unknown] (103 samples, 0.02%)</title><rect x="50.6140%" y="133" width="0.0246%" height="15" fill="rgb(213,46,41)"/><text x="50.8640%" y="143.50"></text></g><g><title>std::io::Read::read_to_string (304 samples, 0.07%)</title><rect x="50.5676%" y="453" width="0.0727%" height="15" fill="rgb(215,133,35)"/><text x="50.8176%" y="463.50"></text></g><g><title>std::io::append_to_string (304 samples, 0.07%)</title><rect x="50.5676%" y="437" width="0.0727%" height="15" fill="rgb(213,28,5)"/><text x="50.8176%" y="447.50"></text></g><g><title>std::io::Read::read_to_string::{{closure}} (248 samples, 0.06%)</title><rect x="50.5810%" y="421" width="0.0593%" height="15" fill="rgb(215,77,49)"/><text x="50.8310%" y="431.50"></text></g><g><title>std::io::read_to_end (248 samples, 0.06%)</title><rect x="50.5810%" y="405" width="0.0593%" height="15" fill="rgb(248,100,22)"/><text x="50.8310%" y="415.50"></text></g><g><title>std::io::read_to_end_with_reservation (248 samples, 0.06%)</title><rect x="50.5810%" y="389" width="0.0593%" height="15" fill="rgb(208,67,9)"/><text x="50.8310%" y="399.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (245 samples, 0.06%)</title><rect x="50.5817%" y="373" width="0.0586%" height="15" fill="rgb(219,133,21)"/><text x="50.8317%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::read (245 samples, 0.06%)</title><rect x="50.5817%" y="357" width="0.0586%" height="15" fill="rgb(246,46,29)"/><text x="50.8317%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (245 samples, 0.06%)</title><rect x="50.5817%" y="341" width="0.0586%" height="15" fill="rgb(246,185,52)"/><text x="50.8317%" y="351.50"></text></g><g><title>__libc_read (245 samples, 0.06%)</title><rect x="50.5817%" y="325" width="0.0586%" height="15" fill="rgb(252,136,11)"/><text x="50.8317%" y="335.50"></text></g><g><title>__libc_read (244 samples, 0.06%)</title><rect x="50.5819%" y="309" width="0.0584%" height="15" fill="rgb(219,138,53)"/><text x="50.8319%" y="319.50"></text></g><g><title>std::fs::read_to_string (1,152 samples, 0.28%)</title><rect x="50.3651%" y="485" width="0.2756%" height="15" fill="rgb(211,51,23)"/><text x="50.6151%" y="495.50"></text></g><g><title>std::fs::read_to_string::inner (1,152 samples, 0.28%)</title><rect x="50.3651%" y="469" width="0.2756%" height="15" fill="rgb(247,221,28)"/><text x="50.6151%" y="479.50"></text></g><g><title>lab4::package::PackageDownloader::run (178,361 samples, 42.68%)</title><rect x="7.9690%" y="501" width="42.6770%" height="15" fill="rgb(251,222,45)"/><text x="8.2190%" y="511.50">lab4::package::PackageDownloader::run</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (3,472 samples, 0.83%)</title><rect x="51.1665%" y="485" width="0.8308%" height="15" fill="rgb(217,162,53)"/><text x="51.4165%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4,123 samples, 0.99%)</title><rect x="52.1070%" y="469" width="0.9865%" height="15" fill="rgb(229,93,14)"/><text x="52.3570%" y="479.50"></text></g><g><title>&lt;crossbeam_channel::select::Token as core::default::Default&gt;::default (497 samples, 0.12%)</title><rect x="53.2766%" y="453" width="0.1189%" height="15" fill="rgb(209,67,49)"/><text x="53.5266%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (514 samples, 0.12%)</title><rect x="53.3960%" y="453" width="0.1230%" height="15" fill="rgb(213,87,29)"/><text x="53.6460%" y="463.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (64 samples, 0.02%)</title><rect x="53.5190%" y="373" width="0.0153%" height="15" fill="rgb(205,151,52)"/><text x="53.7690%" y="383.50"></text></g><g><title>std::thread::park (63 samples, 0.02%)</title><rect x="53.5192%" y="357" width="0.0151%" height="15" fill="rgb(253,215,39)"/><text x="53.7692%" y="367.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (63 samples, 0.02%)</title><rect x="53.5192%" y="341" width="0.0151%" height="15" fill="rgb(221,220,41)"/><text x="53.7692%" y="351.50"></text></g><g><title>std::sys::unix::futex::futex_wait (62 samples, 0.01%)</title><rect x="53.5195%" y="325" width="0.0148%" height="15" fill="rgb(218,133,21)"/><text x="53.7695%" y="335.50"></text></g><g><title>syscall (62 samples, 0.01%)</title><rect x="53.5195%" y="309" width="0.0148%" height="15" fill="rgb(221,193,43)"/><text x="53.7695%" y="319.50"></text></g><g><title>[unknown] (62 samples, 0.01%)</title><rect x="53.5195%" y="293" width="0.0148%" height="15" fill="rgb(240,128,52)"/><text x="53.7695%" y="303.50"></text></g><g><title>[unknown] (61 samples, 0.01%)</title><rect x="53.5197%" y="277" width="0.0146%" height="15" fill="rgb(253,114,12)"/><text x="53.7697%" y="287.50"></text></g><g><title>[unknown] (61 samples, 0.01%)</title><rect x="53.5197%" y="261" width="0.0146%" height="15" fill="rgb(215,223,47)"/><text x="53.7697%" y="271.50"></text></g><g><title>[unknown] (60 samples, 0.01%)</title><rect x="53.5200%" y="245" width="0.0144%" height="15" fill="rgb(248,225,23)"/><text x="53.7700%" y="255.50"></text></g><g><title>[unknown] (58 samples, 0.01%)</title><rect x="53.5204%" y="229" width="0.0139%" height="15" fill="rgb(250,108,0)"/><text x="53.7704%" y="239.50"></text></g><g><title>[unknown] (56 samples, 0.01%)</title><rect x="53.5209%" y="213" width="0.0134%" height="15" fill="rgb(228,208,7)"/><text x="53.7709%" y="223.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="53.5211%" y="197" width="0.0132%" height="15" fill="rgb(244,45,10)"/><text x="53.7711%" y="207.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="53.5211%" y="181" width="0.0132%" height="15" fill="rgb(207,125,25)"/><text x="53.7711%" y="191.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="53.5211%" y="165" width="0.0132%" height="15" fill="rgb(210,195,18)"/><text x="53.7711%" y="175.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="53.5211%" y="149" width="0.0132%" height="15" fill="rgb(249,80,12)"/><text x="53.7711%" y="159.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="53.5211%" y="133" width="0.0132%" height="15" fill="rgb(221,65,9)"/><text x="53.7711%" y="143.50"></text></g><g><title>[unknown] (55 samples, 0.01%)</title><rect x="53.5211%" y="117" width="0.0132%" height="15" fill="rgb(235,49,36)"/><text x="53.7711%" y="127.50"></text></g><g><title>[unknown] (54 samples, 0.01%)</title><rect x="53.5214%" y="101" width="0.0129%" height="15" fill="rgb(225,32,20)"/><text x="53.7714%" y="111.50"></text></g><g><title>[unknown] (54 samples, 0.01%)</title><rect x="53.5214%" y="85" width="0.0129%" height="15" fill="rgb(215,141,46)"/><text x="53.7714%" y="95.50"></text></g><g><title>crossbeam_channel::context::Context::with (68 samples, 0.02%)</title><rect x="53.5190%" y="453" width="0.0163%" height="15" fill="rgb(250,160,47)"/><text x="53.7690%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (68 samples, 0.02%)</title><rect x="53.5190%" y="437" width="0.0163%" height="15" fill="rgb(216,222,40)"/><text x="53.7690%" y="447.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (68 samples, 0.02%)</title><rect x="53.5190%" y="421" width="0.0163%" height="15" fill="rgb(234,217,39)"/><text x="53.7690%" y="431.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (68 samples, 0.02%)</title><rect x="53.5190%" y="405" width="0.0163%" height="15" fill="rgb(207,178,40)"/><text x="53.7690%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (68 samples, 0.02%)</title><rect x="53.5190%" y="389" width="0.0163%" height="15" fill="rgb(221,136,13)"/><text x="53.7690%" y="399.50"></text></g><g><title>__GI___libc_free (75 samples, 0.02%)</title><rect x="53.7066%" y="437" width="0.0179%" height="15" fill="rgb(249,199,10)"/><text x="53.9566%" y="447.50"></text></g><g><title>_int_free (586 samples, 0.14%)</title><rect x="53.7288%" y="437" width="0.1402%" height="15" fill="rgb(249,222,13)"/><text x="53.9788%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (512 samples, 0.12%)</title><rect x="53.8691%" y="437" width="0.1225%" height="15" fill="rgb(244,185,38)"/><text x="54.1191%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (5,400 samples, 1.29%)</title><rect x="53.9932%" y="437" width="1.2921%" height="15" fill="rgb(236,202,9)"/><text x="54.2432%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_or (5,400 samples, 1.29%)</title><rect x="53.9932%" y="421" width="1.2921%" height="15" fill="rgb(250,229,37)"/><text x="54.2432%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (69 samples, 0.02%)</title><rect x="55.3152%" y="421" width="0.0165%" height="15" fill="rgb(206,174,23)"/><text x="55.5652%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (57 samples, 0.01%)</title><rect x="55.3181%" y="405" width="0.0136%" height="15" fill="rgb(211,33,43)"/><text x="55.5681%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Block&lt;T&gt;::destroy (408 samples, 0.10%)</title><rect x="55.2853%" y="437" width="0.0976%" height="15" fill="rgb(245,58,50)"/><text x="55.5353%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (214 samples, 0.05%)</title><rect x="55.3317%" y="421" width="0.0512%" height="15" fill="rgb(244,68,36)"/><text x="55.5817%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (98 samples, 0.02%)</title><rect x="55.3595%" y="405" width="0.0234%" height="15" fill="rgb(232,229,15)"/><text x="55.6095%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (291 samples, 0.07%)</title><rect x="55.3856%" y="421" width="0.0696%" height="15" fill="rgb(254,30,23)"/><text x="55.6356%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (57 samples, 0.01%)</title><rect x="55.4416%" y="405" width="0.0136%" height="15" fill="rgb(235,160,14)"/><text x="55.6916%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (8,039 samples, 1.92%)</title><rect x="53.5353%" y="453" width="1.9235%" height="15" fill="rgb(212,155,44)"/><text x="53.7853%" y="463.50">c..</text></g><g><title>crossbeam_channel::flavors::list::Slot&lt;T&gt;::wait_write (317 samples, 0.08%)</title><rect x="55.3829%" y="437" width="0.0758%" height="15" fill="rgb(226,2,50)"/><text x="55.6329%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (337 samples, 0.08%)</title><rect x="55.8902%" y="437" width="0.0806%" height="15" fill="rgb(234,177,6)"/><text x="56.1402%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (337 samples, 0.08%)</title><rect x="55.8902%" y="421" width="0.0806%" height="15" fill="rgb(217,24,9)"/><text x="56.1402%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (7,005 samples, 1.68%)</title><rect x="55.9708%" y="437" width="1.6761%" height="15" fill="rgb(220,13,46)"/><text x="56.2208%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (7,005 samples, 1.68%)</title><rect x="55.9708%" y="421" width="1.6761%" height="15" fill="rgb(239,221,27)"/><text x="56.2208%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,866 samples, 0.45%)</title><rect x="57.6469%" y="437" width="0.4465%" height="15" fill="rgb(222,198,25)"/><text x="57.8969%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1,866 samples, 0.45%)</title><rect x="57.6469%" y="421" width="0.4465%" height="15" fill="rgb(211,99,13)"/><text x="57.8969%" y="431.50"></text></g><g><title>core::sync::atomic::fence (3,931 samples, 0.94%)</title><rect x="58.0941%" y="437" width="0.9406%" height="15" fill="rgb(232,111,31)"/><text x="58.3441%" y="447.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (69,101 samples, 16.53%)</title><rect x="55.4588%" y="453" width="16.5340%" height="15" fill="rgb(245,82,37)"/><text x="55.7088%" y="463.50">crossbeam_channel::flavors..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (54,134 samples, 12.95%)</title><rect x="59.0400%" y="437" width="12.9528%" height="15" fill="rgb(227,149,46)"/><text x="59.2900%" y="447.50">crossbeam_utils::ba..</text></g><g><title>core::sync::atomic::spin_loop_hint (54,097 samples, 12.94%)</title><rect x="59.0488%" y="421" width="12.9440%" height="15" fill="rgb(218,36,50)"/><text x="59.2988%" y="431.50">core::sync::atomic:..</text></g><g><title>core::hint::spin_loop (54,097 samples, 12.94%)</title><rect x="59.0488%" y="405" width="12.9440%" height="15" fill="rgb(226,80,48)"/><text x="59.2988%" y="415.50">core::hint::spin_lo..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (54,097 samples, 12.94%)</title><rect x="59.0488%" y="389" width="12.9440%" height="15" fill="rgb(238,224,15)"/><text x="59.2988%" y="399.50">core::core_arch::x8..</text></g><g><title>[unknown] (43 samples, 0.01%)</title><rect x="71.9825%" y="373" width="0.0103%" height="15" fill="rgb(241,136,10)"/><text x="72.2325%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (558 samples, 0.13%)</title><rect x="72.0624%" y="437" width="0.1335%" height="15" fill="rgb(208,32,45)"/><text x="72.3124%" y="447.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (84,424 samples, 20.20%)</title><rect x="51.9972%" y="485" width="20.2004%" height="15" fill="rgb(207,135,9)"/><text x="52.2472%" y="495.50">crossbeam_channel::channel::Rece..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (79,842 samples, 19.10%)</title><rect x="53.0936%" y="469" width="19.1041%" height="15" fill="rgb(206,86,44)"/><text x="53.3436%" y="479.50">crossbeam_channel::flavors::li..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (856 samples, 0.20%)</title><rect x="71.9928%" y="453" width="0.2048%" height="15" fill="rgb(245,177,15)"/><text x="72.2428%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (190 samples, 0.05%)</title><rect x="73.1892%" y="469" width="0.0455%" height="15" fill="rgb(206,64,50)"/><text x="73.4392%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (485 samples, 0.12%)</title><rect x="73.7072%" y="421" width="0.1160%" height="15" fill="rgb(234,36,40)"/><text x="73.9572%" y="431.50"></text></g><g><title>_int_malloc (429 samples, 0.10%)</title><rect x="73.9309%" y="341" width="0.1026%" height="15" fill="rgb(213,64,8)"/><text x="74.1809%" y="351.50"></text></g><g><title>__GI___libc_malloc (884 samples, 0.21%)</title><rect x="73.8247%" y="357" width="0.2115%" height="15" fill="rgb(210,75,36)"/><text x="74.0747%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1,402 samples, 0.34%)</title><rect x="73.7058%" y="437" width="0.3355%" height="15" fill="rgb(229,88,21)"/><text x="73.9558%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (911 samples, 0.22%)</title><rect x="73.8233%" y="421" width="0.2180%" height="15" fill="rgb(252,204,47)"/><text x="74.0733%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (911 samples, 0.22%)</title><rect x="73.8233%" y="405" width="0.2180%" height="15" fill="rgb(208,77,27)"/><text x="74.0733%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (911 samples, 0.22%)</title><rect x="73.8233%" y="389" width="0.2180%" height="15" fill="rgb(221,76,26)"/><text x="74.0733%" y="399.50"></text></g><g><title>alloc::alloc::alloc (911 samples, 0.22%)</title><rect x="73.8233%" y="373" width="0.2180%" height="15" fill="rgb(225,139,18)"/><text x="74.0733%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (236 samples, 0.06%)</title><rect x="74.0436%" y="437" width="0.0565%" height="15" fill="rgb(230,137,11)"/><text x="74.2936%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (290 samples, 0.07%)</title><rect x="74.1022%" y="437" width="0.0694%" height="15" fill="rgb(212,28,1)"/><text x="74.3522%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (290 samples, 0.07%)</title><rect x="74.1022%" y="421" width="0.0694%" height="15" fill="rgb(248,164,17)"/><text x="74.3522%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (9,281 samples, 2.22%)</title><rect x="74.1721%" y="437" width="2.2207%" height="15" fill="rgb(222,171,42)"/><text x="74.4221%" y="447.50">c..</text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (9,281 samples, 2.22%)</title><rect x="74.1721%" y="421" width="2.2207%" height="15" fill="rgb(243,84,45)"/><text x="74.4221%" y="431.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (210 samples, 0.05%)</title><rect x="76.3928%" y="437" width="0.0502%" height="15" fill="rgb(252,49,23)"/><text x="76.6428%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_add (210 samples, 0.05%)</title><rect x="76.3928%" y="421" width="0.0502%" height="15" fill="rgb(215,19,7)"/><text x="76.6428%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,059 samples, 0.25%)</title><rect x="76.4431%" y="437" width="0.2534%" height="15" fill="rgb(238,81,41)"/><text x="76.6931%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (1,059 samples, 0.25%)</title><rect x="76.4431%" y="421" width="0.2534%" height="15" fill="rgb(210,199,37)"/><text x="76.6931%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::list::Block&lt;T&gt;::new (1,087 samples, 0.26%)</title><rect x="76.6964%" y="437" width="0.2601%" height="15" fill="rgb(244,192,49)"/><text x="76.9464%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (1,087 samples, 0.26%)</title><rect x="76.6964%" y="421" width="0.2601%" height="15" fill="rgb(226,211,11)"/><text x="76.9464%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1,087 samples, 0.26%)</title><rect x="76.6964%" y="405" width="0.2601%" height="15" fill="rgb(236,162,54)"/><text x="76.9464%" y="415.50"></text></g><g><title>core::intrinsics::write_bytes (1,087 samples, 0.26%)</title><rect x="76.6964%" y="389" width="0.2601%" height="15" fill="rgb(220,229,9)"/><text x="76.9464%" y="399.50"></text></g><g><title>__memset_avx2_unaligned_erms (1,087 samples, 0.26%)</title><rect x="76.6964%" y="373" width="0.2601%" height="15" fill="rgb(250,87,22)"/><text x="76.9464%" y="383.50"></text></g><g><title>__GI___sched_yield (79 samples, 0.02%)</title><rect x="76.9573%" y="421" width="0.0189%" height="15" fill="rgb(239,43,17)"/><text x="77.2073%" y="431.50"></text></g><g><title>[unknown] (73 samples, 0.02%)</title><rect x="76.9587%" y="405" width="0.0175%" height="15" fill="rgb(231,177,25)"/><text x="77.2087%" y="415.50"></text></g><g><title>[unknown] (67 samples, 0.02%)</title><rect x="76.9601%" y="389" width="0.0160%" height="15" fill="rgb(219,179,1)"/><text x="77.2101%" y="399.50"></text></g><g><title>[unknown] (61 samples, 0.01%)</title><rect x="76.9616%" y="373" width="0.0146%" height="15" fill="rgb(238,219,53)"/><text x="77.2116%" y="383.50"></text></g><g><title>[unknown] (60 samples, 0.01%)</title><rect x="76.9618%" y="357" width="0.0144%" height="15" fill="rgb(232,167,36)"/><text x="77.2118%" y="367.50"></text></g><g><title>[unknown] (47 samples, 0.01%)</title><rect x="76.9649%" y="341" width="0.0112%" height="15" fill="rgb(244,19,51)"/><text x="77.2149%" y="351.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="76.9654%" y="325" width="0.0108%" height="15" fill="rgb(224,6,22)"/><text x="77.2154%" y="335.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (85 samples, 0.02%)</title><rect x="76.9565%" y="437" width="0.0203%" height="15" fill="rgb(224,145,5)"/><text x="77.2065%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (49 samples, 0.01%)</title><rect x="76.9826%" y="421" width="0.0117%" height="15" fill="rgb(234,130,49)"/><text x="77.2326%" y="431.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (104,501 samples, 25.00%)</title><rect x="73.3478%" y="453" width="25.0043%" height="15" fill="rgb(254,6,2)"/><text x="73.5978%" y="463.50">crossbeam_channel::flavors::list::Channe..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (89,334 samples, 21.38%)</title><rect x="76.9769%" y="437" width="21.3752%" height="15" fill="rgb(208,96,46)"/><text x="77.2269%" y="447.50">crossbeam_utils::backoff::Backoff:..</text></g><g><title>core::sync::atomic::spin_loop_hint (89,261 samples, 21.36%)</title><rect x="76.9943%" y="421" width="21.3578%" height="15" fill="rgb(239,3,39)"/><text x="77.2443%" y="431.50">core::sync::atomic::spin_loop_hint</text></g><g><title>core::hint::spin_loop (89,261 samples, 21.36%)</title><rect x="76.9943%" y="405" width="21.3578%" height="15" fill="rgb(233,210,1)"/><text x="77.2443%" y="415.50">core::hint::spin_loop</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (89,261 samples, 21.36%)</title><rect x="76.9943%" y="389" width="21.3578%" height="15" fill="rgb(244,137,37)"/><text x="77.2443%" y="399.50">core::core_arch::x86::sse2::_mm_pa..</text></g><g><title>[unknown] (59 samples, 0.01%)</title><rect x="98.3380%" y="373" width="0.0141%" height="15" fill="rgb(240,136,2)"/><text x="98.5880%" y="383.50"></text></g><g><title>[unknown] (52 samples, 0.01%)</title><rect x="98.3397%" y="357" width="0.0124%" height="15" fill="rgb(239,18,37)"/><text x="98.5897%" y="367.50"></text></g><g><title>[unknown] (51 samples, 0.01%)</title><rect x="98.3399%" y="341" width="0.0122%" height="15" fill="rgb(218,185,22)"/><text x="98.5899%" y="351.50"></text></g><g><title>[unknown] (48 samples, 0.01%)</title><rect x="98.3406%" y="325" width="0.0115%" height="15" fill="rgb(225,218,4)"/><text x="98.5906%" y="335.50"></text></g><g><title>[unknown] (48 samples, 0.01%)</title><rect x="98.3406%" y="309" width="0.0115%" height="15" fill="rgb(230,182,32)"/><text x="98.5906%" y="319.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="98.3414%" y="293" width="0.0108%" height="15" fill="rgb(242,56,43)"/><text x="98.5914%" y="303.50"></text></g><g><title>[unknown] (45 samples, 0.01%)</title><rect x="98.3414%" y="277" width="0.0108%" height="15" fill="rgb(233,99,24)"/><text x="98.5914%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (216 samples, 0.05%)</title><rect x="98.3521%" y="437" width="0.0517%" height="15" fill="rgb(234,209,42)"/><text x="98.6021%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::guaranteed_eq (216 samples, 0.05%)</title><rect x="98.3521%" y="421" width="0.0517%" height="15" fill="rgb(227,7,12)"/><text x="98.6021%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (229 samples, 0.05%)</title><rect x="98.4038%" y="437" width="0.0548%" height="15" fill="rgb(245,203,43)"/><text x="98.6538%" y="447.50"></text></g><g><title>core::ptr::write (229 samples, 0.05%)</title><rect x="98.4038%" y="421" width="0.0548%" height="15" fill="rgb(238,205,33)"/><text x="98.6538%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (5,293 samples, 1.27%)</title><rect x="98.4586%" y="437" width="1.2665%" height="15" fill="rgb(231,56,7)"/><text x="98.7086%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_or (5,293 samples, 1.27%)</title><rect x="98.4586%" y="421" width="1.2665%" height="15" fill="rgb(244,186,29)"/><text x="98.7086%" y="431.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (115,357 samples, 27.60%)</title><rect x="72.1976%" y="485" width="27.6019%" height="15" fill="rgb(234,111,31)"/><text x="72.4476%" y="495.50">crossbeam_channel::channel::Sender&lt;T&gt;::send</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (111,023 samples, 26.56%)</title><rect x="73.2346%" y="469" width="26.5648%" height="15" fill="rgb(241,149,10)"/><text x="73.4846%" y="479.50">crossbeam_channel::flavors::list::Channel&lt;T..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (6,049 samples, 1.45%)</title><rect x="98.3521%" y="453" width="1.4474%" height="15" fill="rgb(249,206,44)"/><text x="98.6021%" y="463.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (311 samples, 0.07%)</title><rect x="99.7251%" y="437" width="0.0744%" height="15" fill="rgb(251,153,30)"/><text x="99.9751%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (99 samples, 0.02%)</title><rect x="99.7758%" y="421" width="0.0237%" height="15" fill="rgb(239,152,38)"/><text x="100.0258%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (99 samples, 0.02%)</title><rect x="99.7758%" y="405" width="0.0237%" height="15" fill="rgb(249,139,47)"/><text x="100.0258%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (83 samples, 0.02%)</title><rect x="99.8064%" y="165" width="0.0199%" height="15" fill="rgb(244,64,35)"/><text x="100.0564%" y="175.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (74 samples, 0.02%)</title><rect x="99.8086%" y="149" width="0.0177%" height="15" fill="rgb(216,46,15)"/><text x="100.0586%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (71 samples, 0.02%)</title><rect x="99.8093%" y="133" width="0.0170%" height="15" fill="rgb(250,74,19)"/><text x="100.0593%" y="143.50"></text></g><g><title>hex::val (46 samples, 0.01%)</title><rect x="99.8153%" y="117" width="0.0110%" height="15" fill="rgb(249,42,33)"/><text x="100.0653%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.02%)</title><rect x="99.8059%" y="261" width="0.0218%" height="15" fill="rgb(242,149,17)"/><text x="100.0559%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (91 samples, 0.02%)</title><rect x="99.8059%" y="245" width="0.0218%" height="15" fill="rgb(244,29,21)"/><text x="100.0559%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (91 samples, 0.02%)</title><rect x="99.8059%" y="229" width="0.0218%" height="15" fill="rgb(220,130,37)"/><text x="100.0559%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (89 samples, 0.02%)</title><rect x="99.8064%" y="213" width="0.0213%" height="15" fill="rgb(211,67,2)"/><text x="100.0564%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (89 samples, 0.02%)</title><rect x="99.8064%" y="197" width="0.0213%" height="15" fill="rgb(235,68,52)"/><text x="100.0564%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (89 samples, 0.02%)</title><rect x="99.8064%" y="181" width="0.0213%" height="15" fill="rgb(246,142,3)"/><text x="100.0564%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (133 samples, 0.03%)</title><rect x="99.8052%" y="293" width="0.0318%" height="15" fill="rgb(241,25,7)"/><text x="100.0552%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (133 samples, 0.03%)</title><rect x="99.8052%" y="277" width="0.0318%" height="15" fill="rgb(242,119,39)"/><text x="100.0552%" y="287.50"></text></g><g><title>hex::decode (152 samples, 0.04%)</title><rect x="99.8024%" y="453" width="0.0364%" height="15" fill="rgb(241,98,45)"/><text x="100.0524%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (152 samples, 0.04%)</title><rect x="99.8024%" y="437" width="0.0364%" height="15" fill="rgb(254,28,30)"/><text x="100.0524%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (152 samples, 0.04%)</title><rect x="99.8024%" y="421" width="0.0364%" height="15" fill="rgb(241,142,54)"/><text x="100.0524%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (152 samples, 0.04%)</title><rect x="99.8024%" y="405" width="0.0364%" height="15" fill="rgb(222,85,15)"/><text x="100.0524%" y="415.50"></text></g><g><title>core::iter::adapters::process_results (152 samples, 0.04%)</title><rect x="99.8024%" y="389" width="0.0364%" height="15" fill="rgb(210,85,47)"/><text x="100.0524%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (147 samples, 0.04%)</title><rect x="99.8036%" y="373" width="0.0352%" height="15" fill="rgb(224,206,25)"/><text x="100.0536%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (147 samples, 0.04%)</title><rect x="99.8036%" y="357" width="0.0352%" height="15" fill="rgb(243,201,19)"/><text x="100.0536%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (147 samples, 0.04%)</title><rect x="99.8036%" y="341" width="0.0352%" height="15" fill="rgb(236,59,4)"/><text x="100.0536%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (144 samples, 0.03%)</title><rect x="99.8043%" y="325" width="0.0345%" height="15" fill="rgb(254,179,45)"/><text x="100.0543%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (144 samples, 0.03%)</title><rect x="99.8043%" y="309" width="0.0345%" height="15" fill="rgb(226,14,10)"/><text x="100.0543%" y="319.50"></text></g><g><title>lab4::checksum::Checksum::update (185 samples, 0.04%)</title><rect x="99.7995%" y="469" width="0.0443%" height="15" fill="rgb(244,27,41)"/><text x="100.0495%" y="479.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (64 samples, 0.02%)</title><rect x="99.8438%" y="453" width="0.0153%" height="15" fill="rgb(235,35,32)"/><text x="100.0938%" y="463.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (58 samples, 0.01%)</title><rect x="99.8452%" y="437" width="0.0139%" height="15" fill="rgb(218,68,31)"/><text x="100.0952%" y="447.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (57 samples, 0.01%)</title><rect x="99.8454%" y="421" width="0.0136%" height="15" fill="rgb(207,120,37)"/><text x="100.0954%" y="431.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (57 samples, 0.01%)</title><rect x="99.8454%" y="405" width="0.0136%" height="15" fill="rgb(227,98,0)"/><text x="100.0954%" y="415.50"></text></g><g><title>sha2::sha256::Engine256::finish (56 samples, 0.01%)</title><rect x="99.8457%" y="389" width="0.0134%" height="15" fill="rgb(207,7,3)"/><text x="100.0957%" y="399.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (56 samples, 0.01%)</title><rect x="99.8457%" y="373" width="0.0134%" height="15" fill="rgb(206,98,19)"/><text x="100.0957%" y="383.50"></text></g><g><title>sha2::sha256::Engine256::finish::{{closure}} (54 samples, 0.01%)</title><rect x="99.8461%" y="357" width="0.0129%" height="15" fill="rgb(217,5,26)"/><text x="100.0961%" y="367.50"></text></g><g><title>sha2::sha256::compress256 (54 samples, 0.01%)</title><rect x="99.8461%" y="341" width="0.0129%" height="15" fill="rgb(235,190,38)"/><text x="100.0961%" y="351.50"></text></g><g><title>sha2::sha256::x86::compress (54 samples, 0.01%)</title><rect x="99.8461%" y="325" width="0.0129%" height="15" fill="rgb(247,86,24)"/><text x="100.0961%" y="335.50"></text></g><g><title>sha2::sha256::soft::compress (54 samples, 0.01%)</title><rect x="99.8461%" y="309" width="0.0129%" height="15" fill="rgb(205,101,16)"/><text x="100.0961%" y="319.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (52 samples, 0.01%)</title><rect x="99.8466%" y="293" width="0.0124%" height="15" fill="rgb(246,168,33)"/><text x="100.0966%" y="303.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (95 samples, 0.02%)</title><rect x="99.8438%" y="469" width="0.0227%" height="15" fill="rgb(231,114,1)"/><text x="100.0938%" y="479.50"></text></g><g><title>[unknown] (221 samples, 0.05%)</title><rect x="99.8689%" y="277" width="0.0529%" height="15" fill="rgb(207,184,53)"/><text x="100.1189%" y="287.50"></text></g><g><title>[unknown] (213 samples, 0.05%)</title><rect x="99.8708%" y="261" width="0.0510%" height="15" fill="rgb(224,95,51)"/><text x="100.1208%" y="271.50"></text></g><g><title>[unknown] (209 samples, 0.05%)</title><rect x="99.8717%" y="245" width="0.0500%" height="15" fill="rgb(212,188,45)"/><text x="100.1217%" y="255.50"></text></g><g><title>[unknown] (207 samples, 0.05%)</title><rect x="99.8722%" y="229" width="0.0495%" height="15" fill="rgb(223,154,38)"/><text x="100.1222%" y="239.50"></text></g><g><title>[unknown] (202 samples, 0.05%)</title><rect x="99.8734%" y="213" width="0.0483%" height="15" fill="rgb(251,22,52)"/><text x="100.1234%" y="223.50"></text></g><g><title>[unknown] (196 samples, 0.05%)</title><rect x="99.8749%" y="197" width="0.0469%" height="15" fill="rgb(229,209,22)"/><text x="100.1249%" y="207.50"></text></g><g><title>[unknown] (189 samples, 0.05%)</title><rect x="99.8765%" y="181" width="0.0452%" height="15" fill="rgb(234,138,34)"/><text x="100.1265%" y="191.50"></text></g><g><title>[unknown] (152 samples, 0.04%)</title><rect x="99.8854%" y="165" width="0.0364%" height="15" fill="rgb(212,95,11)"/><text x="100.1354%" y="175.50"></text></g><g><title>[unknown] (137 samples, 0.03%)</title><rect x="99.8890%" y="149" width="0.0328%" height="15" fill="rgb(240,179,47)"/><text x="100.1390%" y="159.50"></text></g><g><title>[unknown] (113 samples, 0.03%)</title><rect x="99.8947%" y="133" width="0.0270%" height="15" fill="rgb(240,163,11)"/><text x="100.1447%" y="143.50"></text></g><g><title>[unknown] (93 samples, 0.02%)</title><rect x="99.8995%" y="117" width="0.0223%" height="15" fill="rgb(236,37,12)"/><text x="100.1495%" y="127.50"></text></g><g><title>[unknown] (81 samples, 0.02%)</title><rect x="99.9024%" y="101" width="0.0194%" height="15" fill="rgb(232,164,16)"/><text x="100.1524%" y="111.50"></text></g><g><title>[unknown] (76 samples, 0.02%)</title><rect x="99.9036%" y="85" width="0.0182%" height="15" fill="rgb(244,205,15)"/><text x="100.1536%" y="95.50"></text></g><g><title>[unknown] (73 samples, 0.02%)</title><rect x="99.9043%" y="69" width="0.0175%" height="15" fill="rgb(223,117,47)"/><text x="100.1543%" y="79.50"></text></g><g><title>[unknown] (63 samples, 0.02%)</title><rect x="99.9067%" y="53" width="0.0151%" height="15" fill="rgb(244,107,35)"/><text x="100.1567%" y="63.50"></text></g><g><title>[unknown] (47 samples, 0.01%)</title><rect x="99.9105%" y="37" width="0.0112%" height="15" fill="rgb(205,140,8)"/><text x="100.1605%" y="47.50"></text></g><g><title>__libc_write (226 samples, 0.05%)</title><rect x="99.8679%" y="309" width="0.0541%" height="15" fill="rgb(228,84,46)"/><text x="100.1179%" y="319.50"></text></g><g><title>__libc_write (226 samples, 0.05%)</title><rect x="99.8679%" y="293" width="0.0541%" height="15" fill="rgb(254,188,9)"/><text x="100.1179%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (227 samples, 0.05%)</title><rect x="99.8679%" y="373" width="0.0543%" height="15" fill="rgb(206,112,54)"/><text x="100.1179%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (227 samples, 0.05%)</title><rect x="99.8679%" y="357" width="0.0543%" height="15" fill="rgb(216,84,49)"/><text x="100.1179%" y="367.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (227 samples, 0.05%)</title><rect x="99.8679%" y="341" width="0.0543%" height="15" fill="rgb(214,194,35)"/><text x="100.1179%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (227 samples, 0.05%)</title><rect x="99.8679%" y="325" width="0.0543%" height="15" fill="rgb(249,28,3)"/><text x="100.1179%" y="335.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (241 samples, 0.06%)</title><rect x="99.8670%" y="405" width="0.0577%" height="15" fill="rgb(222,56,52)"/><text x="100.1170%" y="415.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (241 samples, 0.06%)</title><rect x="99.8670%" y="389" width="0.0577%" height="15" fill="rgb(245,217,50)"/><text x="100.1170%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (384,349 samples, 91.96%)</title><rect x="7.9609%" y="677" width="91.9645%" height="15" fill="rgb(213,201,24)"/><text x="8.2109%" y="687.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (384,349 samples, 91.96%)</title><rect x="7.9609%" y="661" width="91.9645%" height="15" fill="rgb(248,116,28)"/><text x="8.2109%" y="671.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (384,349 samples, 91.96%)</title><rect x="7.9609%" y="645" width="91.9645%" height="15" fill="rgb(219,72,43)"/><text x="8.2109%" y="655.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (384,349 samples, 91.96%)</title><rect x="7.9609%" y="629" width="91.9645%" height="15" fill="rgb(209,138,14)"/><text x="8.2109%" y="639.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>std::panic::catch_unwind (384,349 samples, 91.96%)</title><rect x="7.9609%" y="613" width="91.9645%" height="15" fill="rgb(222,18,33)"/><text x="8.2109%" y="623.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (384,349 samples, 91.96%)</title><rect x="7.9609%" y="597" width="91.9645%" height="15" fill="rgb(213,199,7)"/><text x="8.2109%" y="607.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (384,349 samples, 91.96%)</title><rect x="7.9609%" y="581" width="91.9645%" height="15" fill="rgb(250,110,10)"/><text x="8.2109%" y="591.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (384,349 samples, 91.96%)</title><rect x="7.9609%" y="565" width="91.9645%" height="15" fill="rgb(248,123,6)"/><text x="8.2109%" y="575.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (384,349 samples, 91.96%)</title><rect x="7.9609%" y="549" width="91.9645%" height="15" fill="rgb(206,91,31)"/><text x="8.2109%" y="559.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (384,349 samples, 91.96%)</title><rect x="7.9609%" y="533" width="91.9645%" height="15" fill="rgb(211,154,13)"/><text x="8.2109%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::{{closure}} (384,349 samples, 91.96%)</title><rect x="7.9609%" y="517" width="91.9645%" height="15" fill="rgb(225,148,7)"/><text x="8.2109%" y="527.50">lab4::hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (205,954 samples, 49.28%)</title><rect x="50.6460%" y="501" width="49.2793%" height="15" fill="rgb(220,160,43)"/><text x="50.8960%" y="511.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (526 samples, 0.13%)</title><rect x="99.7995%" y="485" width="0.1259%" height="15" fill="rgb(213,52,39)"/><text x="100.0495%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (246 samples, 0.06%)</title><rect x="99.8665%" y="469" width="0.0589%" height="15" fill="rgb(243,137,7)"/><text x="100.1165%" y="479.50"></text></g><g><title>core::fmt::write (245 samples, 0.06%)</title><rect x="99.8667%" y="453" width="0.0586%" height="15" fill="rgb(230,79,13)"/><text x="100.1167%" y="463.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (244 samples, 0.06%)</title><rect x="99.8670%" y="437" width="0.0584%" height="15" fill="rgb(247,105,23)"/><text x="100.1170%" y="447.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (244 samples, 0.06%)</title><rect x="99.8670%" y="421" width="0.0584%" height="15" fill="rgb(223,179,41)"/><text x="100.1170%" y="431.50"></text></g><g><title>__GI___clone (384,426 samples, 91.98%)</title><rect x="7.9453%" y="725" width="91.9829%" height="15" fill="rgb(218,9,34)"/><text x="8.1953%" y="735.50">__GI___clone</text></g><g><title>start_thread (384,362 samples, 91.97%)</title><rect x="7.9606%" y="709" width="91.9676%" height="15" fill="rgb(222,106,8)"/><text x="8.2106%" y="719.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (384,361 samples, 91.97%)</title><rect x="7.9609%" y="693" width="91.9674%" height="15" fill="rgb(211,220,0)"/><text x="8.2109%" y="703.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (144 samples, 0.03%)</title><rect x="99.9292%" y="725" width="0.0345%" height="15" fill="rgb(229,52,16)"/><text x="100.1792%" y="735.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (76 samples, 0.02%)</title><rect x="99.9639%" y="725" width="0.0182%" height="15" fill="rgb(212,155,18)"/><text x="100.2139%" y="735.50"></text></g><g><title>lab4 (417,927 samples, 100.00%)</title><rect x="0.0000%" y="741" width="99.9988%" height="15" fill="rgb(242,21,14)"/><text x="0.2500%" y="751.50">lab4</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (70 samples, 0.02%)</title><rect x="99.9821%" y="725" width="0.0167%" height="15" fill="rgb(222,19,48)"/><text x="100.2321%" y="735.50"></text></g><g><title>all (417,932 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(232,45,27)"/><text x="0.2500%" y="767.50"></text></g></svg></svg>