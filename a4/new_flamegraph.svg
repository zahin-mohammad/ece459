<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>[anon] (1 samples, 0.36%)</title><rect x="0.0000%" y="485" width="0.3650%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="495.50"></text></g><g><title>_int_free (1 samples, 0.36%)</title><rect x="0.0000%" y="469" width="0.3650%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="469" width="1.0949%" height="15" fill="rgb(221,193,54)"/><text x="0.9799%" y="479.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="453" width="1.0949%" height="15" fill="rgb(248,212,6)"/><text x="0.9799%" y="463.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="437" width="1.0949%" height="15" fill="rgb(208,68,35)"/><text x="0.9799%" y="447.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="421" width="1.0949%" height="15" fill="rgb(232,128,0)"/><text x="0.9799%" y="431.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="405" width="1.0949%" height="15" fill="rgb(207,160,47)"/><text x="0.9799%" y="415.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="389" width="1.0949%" height="15" fill="rgb(228,23,34)"/><text x="0.9799%" y="399.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="0.7299%" y="373" width="1.0949%" height="15" fill="rgb(218,30,26)"/><text x="0.9799%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="357" width="0.3650%" height="15" fill="rgb(220,122,19)"/><text x="1.7099%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="341" width="0.3650%" height="15" fill="rgb(250,228,42)"/><text x="1.7099%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="325" width="0.3650%" height="15" fill="rgb(240,193,28)"/><text x="1.7099%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="309" width="0.3650%" height="15" fill="rgb(216,20,37)"/><text x="1.7099%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="293" width="0.3650%" height="15" fill="rgb(206,188,39)"/><text x="1.7099%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="277" width="0.3650%" height="15" fill="rgb(217,207,13)"/><text x="1.7099%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="261" width="0.3650%" height="15" fill="rgb(231,73,38)"/><text x="1.7099%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="245" width="0.3650%" height="15" fill="rgb(225,20,46)"/><text x="1.7099%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="229" width="0.3650%" height="15" fill="rgb(210,31,41)"/><text x="1.7099%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.4599%" y="213" width="0.3650%" height="15" fill="rgb(221,200,47)"/><text x="1.7099%" y="223.50"></text></g><g><title>__GI___get_nprocs (1 samples, 0.36%)</title><rect x="1.8248%" y="469" width="0.3650%" height="15" fill="rgb(226,26,5)"/><text x="2.0748%" y="479.50"></text></g><g><title>next_line (1 samples, 0.36%)</title><rect x="1.8248%" y="453" width="0.3650%" height="15" fill="rgb(249,33,26)"/><text x="2.0748%" y="463.50"></text></g><g><title>__GI___read_nocancel (1 samples, 0.36%)</title><rect x="1.8248%" y="437" width="0.3650%" height="15" fill="rgb(235,183,28)"/><text x="2.0748%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="421" width="0.3650%" height="15" fill="rgb(221,5,38)"/><text x="2.0748%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="405" width="0.3650%" height="15" fill="rgb(247,18,42)"/><text x="2.0748%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="389" width="0.3650%" height="15" fill="rgb(241,131,45)"/><text x="2.0748%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="373" width="0.3650%" height="15" fill="rgb(249,31,29)"/><text x="2.0748%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="357" width="0.3650%" height="15" fill="rgb(225,111,53)"/><text x="2.0748%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="341" width="0.3650%" height="15" fill="rgb(238,160,17)"/><text x="2.0748%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="325" width="0.3650%" height="15" fill="rgb(214,148,48)"/><text x="2.0748%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="309" width="0.3650%" height="15" fill="rgb(232,36,49)"/><text x="2.0748%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="293" width="0.3650%" height="15" fill="rgb(209,103,24)"/><text x="2.0748%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="277" width="0.3650%" height="15" fill="rgb(229,88,8)"/><text x="2.0748%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="261" width="0.3650%" height="15" fill="rgb(213,181,19)"/><text x="2.0748%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="245" width="0.3650%" height="15" fill="rgb(254,191,54)"/><text x="2.0748%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="1.8248%" y="229" width="0.3650%" height="15" fill="rgb(241,83,37)"/><text x="2.0748%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.36%)</title><rect x="2.1898%" y="469" width="0.3650%" height="15" fill="rgb(233,36,39)"/><text x="2.4398%" y="479.50"></text></g><g><title>_int_free (2 samples, 0.73%)</title><rect x="2.5547%" y="469" width="0.7299%" height="15" fill="rgb(226,3,54)"/><text x="2.8047%" y="479.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::is_empty (1 samples, 0.36%)</title><rect x="3.2847%" y="469" width="0.3650%" height="15" fill="rgb(245,192,40)"/><text x="3.5347%" y="479.50"></text></g><g><title>[unknown] (10 samples, 3.65%)</title><rect x="0.3650%" y="485" width="3.6496%" height="15" fill="rgb(238,167,29)"/><text x="0.6150%" y="495.50">[unk..</text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.36%)</title><rect x="3.6496%" y="469" width="0.3650%" height="15" fill="rgb(232,182,51)"/><text x="3.8996%" y="479.50"></text></g><g><title>[unknown] (70 samples, 25.55%)</title><rect x="4.3796%" y="469" width="25.5474%" height="15" fill="rgb(231,60,39)"/><text x="4.6296%" y="479.50">[unknown]</text></g><g><title>[unknown] (70 samples, 25.55%)</title><rect x="4.3796%" y="453" width="25.5474%" height="15" fill="rgb(208,69,12)"/><text x="4.6296%" y="463.50">[unknown]</text></g><g><title>[unknown] (70 samples, 25.55%)</title><rect x="4.3796%" y="437" width="25.5474%" height="15" fill="rgb(235,93,37)"/><text x="4.6296%" y="447.50">[unknown]</text></g><g><title>[unknown] (70 samples, 25.55%)</title><rect x="4.3796%" y="421" width="25.5474%" height="15" fill="rgb(213,116,39)"/><text x="4.6296%" y="431.50">[unknown]</text></g><g><title>[unknown] (69 samples, 25.18%)</title><rect x="4.7445%" y="405" width="25.1825%" height="15" fill="rgb(222,207,29)"/><text x="4.9945%" y="415.50">[unknown]</text></g><g><title>[unknown] (66 samples, 24.09%)</title><rect x="5.8394%" y="389" width="24.0876%" height="15" fill="rgb(206,96,30)"/><text x="6.0894%" y="399.50">[unknown]</text></g><g><title>[unknown] (66 samples, 24.09%)</title><rect x="5.8394%" y="373" width="24.0876%" height="15" fill="rgb(218,138,4)"/><text x="6.0894%" y="383.50">[unknown]</text></g><g><title>[unknown] (66 samples, 24.09%)</title><rect x="5.8394%" y="357" width="24.0876%" height="15" fill="rgb(250,191,14)"/><text x="6.0894%" y="367.50">[unknown]</text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="28.8321%" y="341" width="1.0949%" height="15" fill="rgb(239,60,40)"/><text x="29.0821%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="28.8321%" y="325" width="1.0949%" height="15" fill="rgb(206,27,48)"/><text x="29.0821%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="28.8321%" y="309" width="1.0949%" height="15" fill="rgb(225,35,8)"/><text x="29.0821%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.73%)</title><rect x="29.1971%" y="293" width="0.7299%" height="15" fill="rgb(250,213,24)"/><text x="29.4471%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="29.5620%" y="277" width="0.3650%" height="15" fill="rgb(247,123,22)"/><text x="29.8120%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="29.5620%" y="261" width="0.3650%" height="15" fill="rgb(231,138,38)"/><text x="29.8120%" y="271.50"></text></g><g><title>__sigjmp_save (1 samples, 0.36%)</title><rect x="29.9270%" y="453" width="0.3650%" height="15" fill="rgb(231,145,46)"/><text x="30.1770%" y="463.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.36%)</title><rect x="31.0219%" y="325" width="0.3650%" height="15" fill="rgb(251,118,11)"/><text x="31.2719%" y="335.50"></text></g><g><title>__GI___libc_malloc (5 samples, 1.82%)</title><rect x="31.3869%" y="325" width="1.8248%" height="15" fill="rgb(217,147,25)"/><text x="31.6369%" y="335.50">_..</text></g><g><title>_int_malloc (2 samples, 0.73%)</title><rect x="32.4818%" y="309" width="0.7299%" height="15" fill="rgb(247,81,37)"/><text x="32.7318%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 3.28%)</title><rect x="30.2920%" y="357" width="3.2847%" height="15" fill="rgb(209,12,38)"/><text x="30.5420%" y="367.50">&lt;al..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 2.92%)</title><rect x="30.6569%" y="341" width="2.9197%" height="15" fill="rgb(227,1,9)"/><text x="30.9069%" y="351.50">&lt;c..</text></g><g><title>__rust_alloc (1 samples, 0.36%)</title><rect x="33.2117%" y="325" width="0.3650%" height="15" fill="rgb(248,47,43)"/><text x="33.4617%" y="335.50"></text></g><g><title>_int_free (3 samples, 1.09%)</title><rect x="33.5766%" y="357" width="1.0949%" height="15" fill="rgb(221,10,30)"/><text x="33.8266%" y="367.50"></text></g><g><title>lab4::idea::IdeaGenerator::run (13 samples, 4.74%)</title><rect x="30.2920%" y="373" width="4.7445%" height="15" fill="rgb(210,229,1)"/><text x="30.5420%" y="383.50">lab4::..</text></g><g><title>std::fs::read_to_string::inner (1 samples, 0.36%)</title><rect x="34.6715%" y="357" width="0.3650%" height="15" fill="rgb(222,148,37)"/><text x="34.9215%" y="367.50"></text></g><g><title>std::io::Read::read_to_string (1 samples, 0.36%)</title><rect x="34.6715%" y="341" width="0.3650%" height="15" fill="rgb(234,67,33)"/><text x="34.9215%" y="351.50"></text></g><g><title>std::io::append_to_string (1 samples, 0.36%)</title><rect x="34.6715%" y="325" width="0.3650%" height="15" fill="rgb(247,98,35)"/><text x="34.9215%" y="335.50"></text></g><g><title>std::io::Read::read_to_string::{{closure}} (1 samples, 0.36%)</title><rect x="34.6715%" y="309" width="0.3650%" height="15" fill="rgb(247,138,52)"/><text x="34.9215%" y="319.50"></text></g><g><title>std::io::read_to_end (1 samples, 0.36%)</title><rect x="34.6715%" y="293" width="0.3650%" height="15" fill="rgb(213,79,30)"/><text x="34.9215%" y="303.50"></text></g><g><title>std::io::read_to_end_with_reservation (1 samples, 0.36%)</title><rect x="34.6715%" y="277" width="0.3650%" height="15" fill="rgb(246,177,23)"/><text x="34.9215%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.36%)</title><rect x="34.6715%" y="261" width="0.3650%" height="15" fill="rgb(230,62,27)"/><text x="34.9215%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.36%)</title><rect x="34.6715%" y="245" width="0.3650%" height="15" fill="rgb(216,154,8)"/><text x="34.9215%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.36%)</title><rect x="34.6715%" y="229" width="0.3650%" height="15" fill="rgb(244,35,45)"/><text x="34.9215%" y="239.50"></text></g><g><title>__libc_read (1 samples, 0.36%)</title><rect x="34.6715%" y="213" width="0.3650%" height="15" fill="rgb(251,115,12)"/><text x="34.9215%" y="223.50"></text></g><g><title>__libc_read (1 samples, 0.36%)</title><rect x="34.6715%" y="197" width="0.3650%" height="15" fill="rgb(240,54,50)"/><text x="34.9215%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="181" width="0.3650%" height="15" fill="rgb(233,84,52)"/><text x="34.9215%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="165" width="0.3650%" height="15" fill="rgb(207,117,47)"/><text x="34.9215%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="149" width="0.3650%" height="15" fill="rgb(249,43,39)"/><text x="34.9215%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="133" width="0.3650%" height="15" fill="rgb(209,38,44)"/><text x="34.9215%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="117" width="0.3650%" height="15" fill="rgb(236,212,23)"/><text x="34.9215%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="101" width="0.3650%" height="15" fill="rgb(242,79,21)"/><text x="34.9215%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="85" width="0.3650%" height="15" fill="rgb(211,96,35)"/><text x="34.9215%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="69" width="0.3650%" height="15" fill="rgb(253,215,40)"/><text x="34.9215%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="34.6715%" y="53" width="0.3650%" height="15" fill="rgb(211,81,21)"/><text x="34.9215%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 1.82%)</title><rect x="35.4015%" y="357" width="1.8248%" height="15" fill="rgb(208,190,38)"/><text x="35.6515%" y="367.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 1.82%)</title><rect x="35.4015%" y="341" width="1.8248%" height="15" fill="rgb(235,213,38)"/><text x="35.6515%" y="351.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 1.82%)</title><rect x="35.4015%" y="325" width="1.8248%" height="15" fill="rgb(237,122,38)"/><text x="35.6515%" y="335.50">a..</text></g><g><title>alloc::slice::hack::to_vec (5 samples, 1.82%)</title><rect x="35.4015%" y="309" width="1.8248%" height="15" fill="rgb(244,218,35)"/><text x="35.6515%" y="319.50">a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 1.82%)</title><rect x="35.4015%" y="293" width="1.8248%" height="15" fill="rgb(240,68,47)"/><text x="35.6515%" y="303.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (5 samples, 1.82%)</title><rect x="35.4015%" y="277" width="1.8248%" height="15" fill="rgb(210,16,53)"/><text x="35.6515%" y="287.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 1.82%)</title><rect x="35.4015%" y="261" width="1.8248%" height="15" fill="rgb(235,124,12)"/><text x="35.6515%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 1.82%)</title><rect x="35.4015%" y="245" width="1.8248%" height="15" fill="rgb(224,169,11)"/><text x="35.6515%" y="255.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (5 samples, 1.82%)</title><rect x="35.4015%" y="229" width="1.8248%" height="15" fill="rgb(250,166,2)"/><text x="35.6515%" y="239.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 1.82%)</title><rect x="35.4015%" y="213" width="1.8248%" height="15" fill="rgb(242,216,29)"/><text x="35.6515%" y="223.50">a..</text></g><g><title>alloc::alloc::alloc (5 samples, 1.82%)</title><rect x="35.4015%" y="197" width="1.8248%" height="15" fill="rgb(230,116,27)"/><text x="35.6515%" y="207.50">a..</text></g><g><title>__GI___libc_malloc (5 samples, 1.82%)</title><rect x="35.4015%" y="181" width="1.8248%" height="15" fill="rgb(228,99,48)"/><text x="35.6515%" y="191.50">_..</text></g><g><title>_int_malloc (5 samples, 1.82%)</title><rect x="35.4015%" y="165" width="1.8248%" height="15" fill="rgb(253,11,6)"/><text x="35.6515%" y="175.50">_..</text></g><g><title>sysmalloc (1 samples, 0.36%)</title><rect x="36.8613%" y="149" width="0.3650%" height="15" fill="rgb(247,143,39)"/><text x="37.1113%" y="159.50"></text></g><g><title>grow_heap (1 samples, 0.36%)</title><rect x="36.8613%" y="133" width="0.3650%" height="15" fill="rgb(236,97,10)"/><text x="37.1113%" y="143.50"></text></g><g><title>__GI___mprotect (1 samples, 0.36%)</title><rect x="36.8613%" y="117" width="0.3650%" height="15" fill="rgb(233,208,19)"/><text x="37.1113%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="36.8613%" y="101" width="0.3650%" height="15" fill="rgb(216,164,2)"/><text x="37.1113%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="36.8613%" y="85" width="0.3650%" height="15" fill="rgb(220,129,5)"/><text x="37.1113%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="36.8613%" y="69" width="0.3650%" height="15" fill="rgb(242,17,10)"/><text x="37.1113%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="36.8613%" y="53" width="0.3650%" height="15" fill="rgb(242,107,0)"/><text x="37.1113%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="36.8613%" y="37" width="0.3650%" height="15" fill="rgb(251,28,31)"/><text x="37.1113%" y="47.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.36%)</title><rect x="37.5912%" y="341" width="0.3650%" height="15" fill="rgb(233,223,10)"/><text x="37.8412%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.36%)</title><rect x="37.5912%" y="325" width="0.3650%" height="15" fill="rgb(215,21,27)"/><text x="37.8412%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.36%)</title><rect x="37.5912%" y="309" width="0.3650%" height="15" fill="rgb(232,23,21)"/><text x="37.8412%" y="319.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (1 samples, 0.36%)</title><rect x="37.5912%" y="293" width="0.3650%" height="15" fill="rgb(244,5,23)"/><text x="37.8412%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.09%)</title><rect x="37.2263%" y="357" width="1.0949%" height="15" fill="rgb(226,81,46)"/><text x="37.4763%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.36%)</title><rect x="37.9562%" y="341" width="0.3650%" height="15" fill="rgb(247,70,30)"/><text x="38.2062%" y="351.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.36%)</title><rect x="37.9562%" y="325" width="0.3650%" height="15" fill="rgb(212,68,19)"/><text x="38.2062%" y="335.50"></text></g><g><title>_int_realloc (1 samples, 0.36%)</title><rect x="37.9562%" y="309" width="0.3650%" height="15" fill="rgb(240,187,13)"/><text x="38.2062%" y="319.50"></text></g><g><title>_int_malloc (1 samples, 0.36%)</title><rect x="37.9562%" y="293" width="0.3650%" height="15" fill="rgb(223,113,26)"/><text x="38.2062%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="277" width="0.3650%" height="15" fill="rgb(206,192,2)"/><text x="38.2062%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="261" width="0.3650%" height="15" fill="rgb(241,108,4)"/><text x="38.2062%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="245" width="0.3650%" height="15" fill="rgb(247,173,49)"/><text x="38.2062%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="229" width="0.3650%" height="15" fill="rgb(224,114,35)"/><text x="38.2062%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="213" width="0.3650%" height="15" fill="rgb(245,159,27)"/><text x="38.2062%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="197" width="0.3650%" height="15" fill="rgb(245,172,44)"/><text x="38.2062%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="181" width="0.3650%" height="15" fill="rgb(236,23,11)"/><text x="38.2062%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="165" width="0.3650%" height="15" fill="rgb(205,117,38)"/><text x="38.2062%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="37.9562%" y="149" width="0.3650%" height="15" fill="rgb(237,72,25)"/><text x="38.2062%" y="159.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (49 samples, 17.88%)</title><rect x="38.3212%" y="357" width="17.8832%" height="15" fill="rgb(244,70,9)"/><text x="38.5712%" y="367.50">crossbeam_channel::channel::..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (48 samples, 17.52%)</title><rect x="38.6861%" y="341" width="17.5182%" height="15" fill="rgb(217,125,39)"/><text x="38.9361%" y="351.50">crossbeam_channel::flavors:..</text></g><g><title>__GI___libc_malloc (1 samples, 0.36%)</title><rect x="55.8394%" y="325" width="0.3650%" height="15" fill="rgb(235,36,10)"/><text x="56.0894%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.36%)</title><rect x="55.8394%" y="309" width="0.3650%" height="15" fill="rgb(251,123,47)"/><text x="56.0894%" y="319.50"></text></g><g><title>sysmalloc (1 samples, 0.36%)</title><rect x="55.8394%" y="293" width="0.3650%" height="15" fill="rgb(221,13,13)"/><text x="56.0894%" y="303.50"></text></g><g><title>grow_heap (1 samples, 0.36%)</title><rect x="55.8394%" y="277" width="0.3650%" height="15" fill="rgb(238,131,9)"/><text x="56.0894%" y="287.50"></text></g><g><title>__GI___mprotect (1 samples, 0.36%)</title><rect x="55.8394%" y="261" width="0.3650%" height="15" fill="rgb(211,50,8)"/><text x="56.0894%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="245" width="0.3650%" height="15" fill="rgb(245,182,24)"/><text x="56.0894%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="229" width="0.3650%" height="15" fill="rgb(242,14,37)"/><text x="56.0894%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="213" width="0.3650%" height="15" fill="rgb(246,228,12)"/><text x="56.0894%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="197" width="0.3650%" height="15" fill="rgb(213,55,15)"/><text x="56.0894%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="181" width="0.3650%" height="15" fill="rgb(209,9,3)"/><text x="56.0894%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="165" width="0.3650%" height="15" fill="rgb(230,59,30)"/><text x="56.0894%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="149" width="0.3650%" height="15" fill="rgb(209,121,21)"/><text x="56.0894%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="55.8394%" y="133" width="0.3650%" height="15" fill="rgb(220,109,13)"/><text x="56.0894%" y="143.50"></text></g><g><title>lab4::checksum::Checksum::update (4 samples, 1.46%)</title><rect x="56.2044%" y="357" width="1.4599%" height="15" fill="rgb(232,18,1)"/><text x="56.4544%" y="367.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (32 samples, 11.68%)</title><rect x="58.7591%" y="341" width="11.6788%" height="15" fill="rgb(215,41,42)"/><text x="59.0091%" y="351.50">&lt;sha2::sha256::Sh..</text></g><g><title>sha2::sha256::Engine256::finish (32 samples, 11.68%)</title><rect x="58.7591%" y="325" width="11.6788%" height="15" fill="rgb(224,123,36)"/><text x="59.0091%" y="335.50">sha2::sha256::Eng..</text></g><g><title>sha2::sha256::soft::compress (31 samples, 11.31%)</title><rect x="59.1241%" y="309" width="11.3139%" height="15" fill="rgb(240,125,3)"/><text x="59.3741%" y="319.50">sha2::sha256::sof..</text></g><g><title>lab4::package::PackageDownloader::run (100 samples, 36.50%)</title><rect x="35.0365%" y="373" width="36.4964%" height="15" fill="rgb(205,98,50)"/><text x="35.2865%" y="383.50">lab4::package::PackageDownloader::run</text></g><g><title>lab4::checksum::Checksum::with_sha256 (38 samples, 13.87%)</title><rect x="57.6642%" y="357" width="13.8686%" height="15" fill="rgb(205,185,37)"/><text x="57.9142%" y="367.50">lab4::checksum::Check..</text></g><g><title>__GI___libc_malloc (3 samples, 1.09%)</title><rect x="70.4380%" y="341" width="1.0949%" height="15" fill="rgb(238,207,15)"/><text x="70.6880%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.36%)</title><rect x="71.5328%" y="357" width="0.3650%" height="15" fill="rgb(213,199,42)"/><text x="71.7828%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="341" width="0.3650%" height="15" fill="rgb(235,201,11)"/><text x="71.7828%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="325" width="0.3650%" height="15" fill="rgb(207,46,11)"/><text x="71.7828%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="309" width="0.3650%" height="15" fill="rgb(241,35,35)"/><text x="71.7828%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="293" width="0.3650%" height="15" fill="rgb(243,32,47)"/><text x="71.7828%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="277" width="0.3650%" height="15" fill="rgb(247,202,23)"/><text x="71.7828%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="261" width="0.3650%" height="15" fill="rgb(219,102,11)"/><text x="71.7828%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="245" width="0.3650%" height="15" fill="rgb(243,110,44)"/><text x="71.7828%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="229" width="0.3650%" height="15" fill="rgb(222,74,54)"/><text x="71.7828%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="213" width="0.3650%" height="15" fill="rgb(216,99,12)"/><text x="71.7828%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="197" width="0.3650%" height="15" fill="rgb(226,22,26)"/><text x="71.7828%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="181" width="0.3650%" height="15" fill="rgb(217,163,10)"/><text x="71.7828%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="71.5328%" y="165" width="0.3650%" height="15" fill="rgb(213,25,53)"/><text x="71.7828%" y="175.50"></text></g><g><title>__GI___pthread_mutex_lock (29 samples, 10.58%)</title><rect x="71.8978%" y="357" width="10.5839%" height="15" fill="rgb(252,105,26)"/><text x="72.1478%" y="367.50">__GI___pthread_..</text></g><g><title>__lll_lock_wait (29 samples, 10.58%)</title><rect x="71.8978%" y="341" width="10.5839%" height="15" fill="rgb(220,39,43)"/><text x="72.1478%" y="351.50">__lll_lock_wait</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="325" width="10.5839%" height="15" fill="rgb(229,68,48)"/><text x="72.1478%" y="335.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="309" width="10.5839%" height="15" fill="rgb(252,8,32)"/><text x="72.1478%" y="319.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="293" width="10.5839%" height="15" fill="rgb(223,20,43)"/><text x="72.1478%" y="303.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="277" width="10.5839%" height="15" fill="rgb(229,81,49)"/><text x="72.1478%" y="287.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="261" width="10.5839%" height="15" fill="rgb(236,28,36)"/><text x="72.1478%" y="271.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="245" width="10.5839%" height="15" fill="rgb(249,185,26)"/><text x="72.1478%" y="255.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="229" width="10.5839%" height="15" fill="rgb(249,174,33)"/><text x="72.1478%" y="239.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="213" width="10.5839%" height="15" fill="rgb(233,201,37)"/><text x="72.1478%" y="223.50">[unknown]</text></g><g><title>[unknown] (29 samples, 10.58%)</title><rect x="71.8978%" y="197" width="10.5839%" height="15" fill="rgb(221,78,26)"/><text x="72.1478%" y="207.50">[unknown]</text></g><g><title>[unknown] (28 samples, 10.22%)</title><rect x="72.2628%" y="181" width="10.2190%" height="15" fill="rgb(250,127,30)"/><text x="72.5128%" y="191.50">[unknown]</text></g><g><title>[unknown] (26 samples, 9.49%)</title><rect x="72.9927%" y="165" width="9.4891%" height="15" fill="rgb(230,49,44)"/><text x="73.2427%" y="175.50">[unknown]</text></g><g><title>[unknown] (26 samples, 9.49%)</title><rect x="72.9927%" y="149" width="9.4891%" height="15" fill="rgb(229,67,23)"/><text x="73.2427%" y="159.50">[unknown]</text></g><g><title>[unknown] (25 samples, 9.12%)</title><rect x="73.3577%" y="133" width="9.1241%" height="15" fill="rgb(249,83,47)"/><text x="73.6077%" y="143.50">[unknown]</text></g><g><title>[unknown] (25 samples, 9.12%)</title><rect x="73.3577%" y="117" width="9.1241%" height="15" fill="rgb(215,43,3)"/><text x="73.6077%" y="127.50">[unknown]</text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (4 samples, 1.46%)</title><rect x="82.4818%" y="357" width="1.4599%" height="15" fill="rgb(238,154,13)"/><text x="82.7318%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (3 samples, 1.09%)</title><rect x="82.8467%" y="341" width="1.0949%" height="15" fill="rgb(219,56,2)"/><text x="83.0967%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::try_recv (7 samples, 2.55%)</title><rect x="83.9416%" y="357" width="2.5547%" height="15" fill="rgb(233,0,4)"/><text x="84.1916%" y="367.50">cr..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::try_recv (6 samples, 2.19%)</title><rect x="84.3066%" y="341" width="2.1898%" height="15" fill="rgb(235,30,7)"/><text x="84.5566%" y="351.50">c..</text></g><g><title>lab4::checksum::Checksum::update (3 samples, 1.09%)</title><rect x="86.4964%" y="357" width="1.0949%" height="15" fill="rgb(250,79,13)"/><text x="86.7464%" y="367.50"></text></g><g><title>_int_free (2 samples, 0.73%)</title><rect x="86.8613%" y="341" width="0.7299%" height="15" fill="rgb(211,146,34)"/><text x="87.1113%" y="351.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (20 samples, 7.30%)</title><rect x="87.5912%" y="341" width="7.2993%" height="15" fill="rgb(228,22,38)"/><text x="87.8412%" y="351.50">&lt;sha2::sha..</text></g><g><title>sha2::sha256::Engine256::finish (20 samples, 7.30%)</title><rect x="87.5912%" y="325" width="7.2993%" height="15" fill="rgb(235,168,5)"/><text x="87.8412%" y="335.50">sha2::sha2..</text></g><g><title>sha2::sha256::soft::compress (20 samples, 7.30%)</title><rect x="87.5912%" y="309" width="7.2993%" height="15" fill="rgb(221,155,16)"/><text x="87.8412%" y="319.50">sha2::sha2..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (178 samples, 64.96%)</title><rect x="30.2920%" y="389" width="64.9635%" height="15" fill="rgb(215,215,53)"/><text x="30.5420%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::student::Student::run (65 samples, 23.72%)</title><rect x="71.5328%" y="373" width="23.7226%" height="15" fill="rgb(223,4,10)"/><text x="71.7828%" y="383.50">lab4::student::Student::run</text></g><g><title>lab4::checksum::Checksum::with_sha256 (21 samples, 7.66%)</title><rect x="87.5912%" y="357" width="7.6642%" height="15" fill="rgb(234,103,6)"/><text x="87.8412%" y="367.50">lab4::chec..</text></g><g><title>__GI___libc_malloc (1 samples, 0.36%)</title><rect x="94.8905%" y="341" width="0.3650%" height="15" fill="rgb(227,97,0)"/><text x="95.1405%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (179 samples, 65.33%)</title><rect x="30.2920%" y="437" width="65.3285%" height="15" fill="rgb(234,150,53)"/><text x="30.5420%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (179 samples, 65.33%)</title><rect x="30.2920%" y="421" width="65.3285%" height="15" fill="rgb(228,201,54)"/><text x="30.5420%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (179 samples, 65.33%)</title><rect x="30.2920%" y="405" width="65.3285%" height="15" fill="rgb(222,22,37)"/><text x="30.5420%" y="415.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::sys_common::thread_info::set (1 samples, 0.36%)</title><rect x="95.2555%" y="389" width="0.3650%" height="15" fill="rgb(237,53,32)"/><text x="95.5055%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.36%)</title><rect x="95.2555%" y="373" width="0.3650%" height="15" fill="rgb(233,25,53)"/><text x="95.5055%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.36%)</title><rect x="95.2555%" y="357" width="0.3650%" height="15" fill="rgb(210,40,34)"/><text x="95.5055%" y="367.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (1 samples, 0.36%)</title><rect x="95.2555%" y="341" width="0.3650%" height="15" fill="rgb(241,220,44)"/><text x="95.5055%" y="351.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (1 samples, 0.36%)</title><rect x="95.2555%" y="325" width="0.3650%" height="15" fill="rgb(235,28,35)"/><text x="95.5055%" y="335.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (1 samples, 0.36%)</title><rect x="95.2555%" y="309" width="0.3650%" height="15" fill="rgb(210,56,17)"/><text x="95.5055%" y="319.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_register_dtor (1 samples, 0.36%)</title><rect x="95.2555%" y="293" width="0.3650%" height="15" fill="rgb(224,130,29)"/><text x="95.5055%" y="303.50"></text></g><g><title>std::sys::unix::thread_local_dtor::register_dtor (1 samples, 0.36%)</title><rect x="95.2555%" y="277" width="0.3650%" height="15" fill="rgb(235,212,8)"/><text x="95.5055%" y="287.50"></text></g><g><title>__cxa_thread_atexit_impl (1 samples, 0.36%)</title><rect x="95.2555%" y="261" width="0.3650%" height="15" fill="rgb(223,33,50)"/><text x="95.5055%" y="271.50"></text></g><g><title>__libc_calloc (1 samples, 0.36%)</title><rect x="95.2555%" y="245" width="0.3650%" height="15" fill="rgb(219,149,13)"/><text x="95.5055%" y="255.50"></text></g><g><title>__GI___mmap64 (3 samples, 1.09%)</title><rect x="95.6204%" y="373" width="1.0949%" height="15" fill="rgb(250,156,29)"/><text x="95.8704%" y="383.50"></text></g><g><title>__GI___mmap64 (3 samples, 1.09%)</title><rect x="95.6204%" y="357" width="1.0949%" height="15" fill="rgb(216,193,19)"/><text x="95.8704%" y="367.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="95.6204%" y="341" width="1.0949%" height="15" fill="rgb(216,135,14)"/><text x="95.8704%" y="351.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="95.6204%" y="325" width="1.0949%" height="15" fill="rgb(241,47,5)"/><text x="95.8704%" y="335.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="95.6204%" y="309" width="1.0949%" height="15" fill="rgb(233,42,35)"/><text x="95.8704%" y="319.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="95.6204%" y="293" width="1.0949%" height="15" fill="rgb(231,13,6)"/><text x="95.8704%" y="303.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="95.6204%" y="277" width="1.0949%" height="15" fill="rgb(207,181,40)"/><text x="95.8704%" y="287.50"></text></g><g><title>[unknown] (3 samples, 1.09%)</title><rect x="95.6204%" y="261" width="1.0949%" height="15" fill="rgb(254,173,49)"/><text x="95.8704%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.73%)</title><rect x="95.9854%" y="245" width="0.7299%" height="15" fill="rgb(221,1,38)"/><text x="96.2354%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.73%)</title><rect x="95.9854%" y="229" width="0.7299%" height="15" fill="rgb(206,124,46)"/><text x="96.2354%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.73%)</title><rect x="95.9854%" y="213" width="0.7299%" height="15" fill="rgb(249,21,11)"/><text x="96.2354%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="96.3504%" y="197" width="0.3650%" height="15" fill="rgb(222,201,40)"/><text x="96.6004%" y="207.50"></text></g><g><title>__GI___clone (255 samples, 93.07%)</title><rect x="4.0146%" y="485" width="93.0657%" height="15" fill="rgb(235,61,29)"/><text x="4.2646%" y="495.50">__GI___clone</text></g><g><title>start_thread (184 samples, 67.15%)</title><rect x="29.9270%" y="469" width="67.1533%" height="15" fill="rgb(219,207,3)"/><text x="30.1770%" y="479.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (183 samples, 66.79%)</title><rect x="30.2920%" y="453" width="66.7883%" height="15" fill="rgb(222,56,46)"/><text x="30.5420%" y="463.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (4 samples, 1.46%)</title><rect x="95.6204%" y="437" width="1.4599%" height="15" fill="rgb(239,76,54)"/><text x="95.8704%" y="447.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (4 samples, 1.46%)</title><rect x="95.6204%" y="421" width="1.4599%" height="15" fill="rgb(231,124,27)"/><text x="95.8704%" y="431.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 1.46%)</title><rect x="95.6204%" y="405" width="1.4599%" height="15" fill="rgb(249,195,6)"/><text x="95.8704%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 1.46%)</title><rect x="95.6204%" y="389" width="1.4599%" height="15" fill="rgb(237,174,47)"/><text x="95.8704%" y="399.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.36%)</title><rect x="96.7153%" y="373" width="0.3650%" height="15" fill="rgb(206,201,31)"/><text x="96.9653%" y="383.50"></text></g><g><title>__GI___sysconf (1 samples, 0.36%)</title><rect x="96.7153%" y="357" width="0.3650%" height="15" fill="rgb(231,57,52)"/><text x="96.9653%" y="367.50"></text></g><g><title>linux_sysconf (1 samples, 0.36%)</title><rect x="96.7153%" y="341" width="0.3650%" height="15" fill="rgb(248,177,22)"/><text x="96.9653%" y="351.50"></text></g><g><title>posix_sysconf (1 samples, 0.36%)</title><rect x="96.7153%" y="325" width="0.3650%" height="15" fill="rgb(215,211,37)"/><text x="96.9653%" y="335.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.36%)</title><rect x="96.7153%" y="309" width="0.3650%" height="15" fill="rgb(241,128,51)"/><text x="96.9653%" y="319.50"></text></g><g><title>_start (1 samples, 0.36%)</title><rect x="97.0803%" y="485" width="0.3650%" height="15" fill="rgb(227,165,31)"/><text x="97.3303%" y="495.50"></text></g><g><title>__libc_start_main (1 samples, 0.36%)</title><rect x="97.0803%" y="469" width="0.3650%" height="15" fill="rgb(228,167,24)"/><text x="97.3303%" y="479.50"></text></g><g><title>main (1 samples, 0.36%)</title><rect x="97.0803%" y="453" width="0.3650%" height="15" fill="rgb(228,143,12)"/><text x="97.3303%" y="463.50"></text></g><g><title>std::rt::lang_start_internal (1 samples, 0.36%)</title><rect x="97.0803%" y="437" width="0.3650%" height="15" fill="rgb(249,149,8)"/><text x="97.3303%" y="447.50"></text></g><g><title>std::panic::catch_unwind (1 samples, 0.36%)</title><rect x="97.0803%" y="421" width="0.3650%" height="15" fill="rgb(243,35,44)"/><text x="97.3303%" y="431.50"></text></g><g><title>std::panicking::try (1 samples, 0.36%)</title><rect x="97.0803%" y="405" width="0.3650%" height="15" fill="rgb(246,89,9)"/><text x="97.3303%" y="415.50"></text></g><g><title>std::panicking::try::do_call (1 samples, 0.36%)</title><rect x="97.0803%" y="389" width="0.3650%" height="15" fill="rgb(233,213,13)"/><text x="97.3303%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1 samples, 0.36%)</title><rect x="97.0803%" y="373" width="0.3650%" height="15" fill="rgb(233,141,41)"/><text x="97.3303%" y="383.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (1 samples, 0.36%)</title><rect x="97.0803%" y="357" width="0.3650%" height="15" fill="rgb(239,167,4)"/><text x="97.3303%" y="367.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 0.36%)</title><rect x="97.0803%" y="341" width="0.3650%" height="15" fill="rgb(209,217,16)"/><text x="97.3303%" y="351.50"></text></g><g><title>lab4::main (1 samples, 0.36%)</title><rect x="97.0803%" y="325" width="0.3650%" height="15" fill="rgb(219,88,35)"/><text x="97.3303%" y="335.50"></text></g><g><title>std::thread::spawn (1 samples, 0.36%)</title><rect x="97.0803%" y="309" width="0.3650%" height="15" fill="rgb(220,193,23)"/><text x="97.3303%" y="319.50"></text></g><g><title>std::sys::unix::thread::Thread::new (1 samples, 0.36%)</title><rect x="97.0803%" y="293" width="0.3650%" height="15" fill="rgb(230,90,52)"/><text x="97.3303%" y="303.50"></text></g><g><title>__pthread_create_2_1 (1 samples, 0.36%)</title><rect x="97.0803%" y="277" width="0.3650%" height="15" fill="rgb(252,106,19)"/><text x="97.3303%" y="287.50"></text></g><g><title>create_thread (1 samples, 0.36%)</title><rect x="97.0803%" y="261" width="0.3650%" height="15" fill="rgb(206,74,20)"/><text x="97.3303%" y="271.50"></text></g><g><title>__GI___clone (1 samples, 0.36%)</title><rect x="97.0803%" y="245" width="0.3650%" height="15" fill="rgb(230,138,44)"/><text x="97.3303%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="229" width="0.3650%" height="15" fill="rgb(235,182,43)"/><text x="97.3303%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="213" width="0.3650%" height="15" fill="rgb(242,16,51)"/><text x="97.3303%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="197" width="0.3650%" height="15" fill="rgb(248,9,4)"/><text x="97.3303%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="181" width="0.3650%" height="15" fill="rgb(210,31,22)"/><text x="97.3303%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="165" width="0.3650%" height="15" fill="rgb(239,54,39)"/><text x="97.3303%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="149" width="0.3650%" height="15" fill="rgb(230,99,41)"/><text x="97.3303%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="133" width="0.3650%" height="15" fill="rgb(253,106,12)"/><text x="97.3303%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.36%)</title><rect x="97.0803%" y="117" width="0.3650%" height="15" fill="rgb(213,46,41)"/><text x="97.3303%" y="127.50"></text></g><g><title>lab4 (268 samples, 97.81%)</title><rect x="0.0000%" y="501" width="97.8102%" height="15" fill="rgb(215,133,35)"/><text x="0.2500%" y="511.50">lab4</text></g><g><title>malloc_consolidate (1 samples, 0.36%)</title><rect x="97.4453%" y="485" width="0.3650%" height="15" fill="rgb(213,28,5)"/><text x="97.6953%" y="495.50"></text></g><g><title>all (274 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(215,77,49)"/><text x="0.2500%" y="527.50"></text></g><g><title>perf (6 samples, 2.19%)</title><rect x="97.8102%" y="501" width="2.1898%" height="15" fill="rgb(248,100,22)"/><text x="98.0602%" y="511.50">p..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="485" width="2.1898%" height="15" fill="rgb(208,67,9)"/><text x="98.0602%" y="495.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="469" width="2.1898%" height="15" fill="rgb(219,133,21)"/><text x="98.0602%" y="479.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="453" width="2.1898%" height="15" fill="rgb(246,46,29)"/><text x="98.0602%" y="463.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="437" width="2.1898%" height="15" fill="rgb(246,185,52)"/><text x="98.0602%" y="447.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="421" width="2.1898%" height="15" fill="rgb(252,136,11)"/><text x="98.0602%" y="431.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="405" width="2.1898%" height="15" fill="rgb(219,138,53)"/><text x="98.0602%" y="415.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="389" width="2.1898%" height="15" fill="rgb(211,51,23)"/><text x="98.0602%" y="399.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="373" width="2.1898%" height="15" fill="rgb(247,221,28)"/><text x="98.0602%" y="383.50">[..</text></g><g><title>[unknown] (6 samples, 2.19%)</title><rect x="97.8102%" y="357" width="2.1898%" height="15" fill="rgb(251,222,45)"/><text x="98.0602%" y="367.50">[..</text></g><g><title>[unknown] (5 samples, 1.82%)</title><rect x="98.1752%" y="341" width="1.8248%" height="15" fill="rgb(217,162,53)"/><text x="98.4252%" y="351.50">[..</text></g><g><title>[unknown] (5 samples, 1.82%)</title><rect x="98.1752%" y="325" width="1.8248%" height="15" fill="rgb(229,93,14)"/><text x="98.4252%" y="335.50">[..</text></g><g><title>[unknown] (5 samples, 1.82%)</title><rect x="98.1752%" y="309" width="1.8248%" height="15" fill="rgb(209,67,49)"/><text x="98.4252%" y="319.50">[..</text></g><g><title>[unknown] (5 samples, 1.82%)</title><rect x="98.1752%" y="293" width="1.8248%" height="15" fill="rgb(213,87,29)"/><text x="98.4252%" y="303.50">[..</text></g></svg></svg>